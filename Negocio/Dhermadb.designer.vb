'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.18444
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="dherma2")>  _
Partial Public Class DhermadbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertalicuotaIva(instance As alicuotaIva)
    End Sub
  Partial Private Sub UpdatealicuotaIva(instance As alicuotaIva)
    End Sub
  Partial Private Sub DeletealicuotaIva(instance As alicuotaIva)
    End Sub
  Partial Private Sub Insertcheque(instance As cheque)
    End Sub
  Partial Private Sub Updatecheque(instance As cheque)
    End Sub
  Partial Private Sub Deletecheque(instance As cheque)
    End Sub
  Partial Private Sub InsertTarjeta(instance As Tarjeta)
    End Sub
  Partial Private Sub UpdateTarjeta(instance As Tarjeta)
    End Sub
  Partial Private Sub DeleteTarjeta(instance As Tarjeta)
    End Sub
  Partial Private Sub InserttipoTarjeta(instance As tipoTarjeta)
    End Sub
  Partial Private Sub UpdatetipoTarjeta(instance As tipoTarjeta)
    End Sub
  Partial Private Sub DeletetipoTarjeta(instance As tipoTarjeta)
    End Sub
  Partial Private Sub InsertcompraCabe(instance As compraCabe)
    End Sub
  Partial Private Sub UpdatecompraCabe(instance As compraCabe)
    End Sub
  Partial Private Sub DeletecompraCabe(instance As compraCabe)
    End Sub
  Partial Private Sub InsertcompraItem(instance As compraItem)
    End Sub
  Partial Private Sub UpdatecompraItem(instance As compraItem)
    End Sub
  Partial Private Sub DeletecompraItem(instance As compraItem)
    End Sub
  Partial Private Sub InsertcondicionIva(instance As condicionIva)
    End Sub
  Partial Private Sub UpdatecondicionIva(instance As condicionIva)
    End Sub
  Partial Private Sub DeletecondicionIva(instance As condicionIva)
    End Sub
  Partial Private Sub Insertdeposito(instance As deposito)
    End Sub
  Partial Private Sub Updatedeposito(instance As deposito)
    End Sub
  Partial Private Sub Deletedeposito(instance As deposito)
    End Sub
  Partial Private Sub InsertdescripcionMovCaja(instance As descripcionMovCaja)
    End Sub
  Partial Private Sub UpdatedescripcionMovCaja(instance As descripcionMovCaja)
    End Sub
  Partial Private Sub DeletedescripcionMovCaja(instance As descripcionMovCaja)
    End Sub
  Partial Private Sub InsertestadoPedido(instance As estadoPedido)
    End Sub
  Partial Private Sub UpdateestadoPedido(instance As estadoPedido)
    End Sub
  Partial Private Sub DeleteestadoPedido(instance As estadoPedido)
    End Sub
  Partial Private Sub Insertkit(instance As kit)
    End Sub
  Partial Private Sub Updatekit(instance As kit)
    End Sub
  Partial Private Sub Deletekit(instance As kit)
    End Sub
  Partial Private Sub InsertkitProducto(instance As kitProducto)
    End Sub
  Partial Private Sub UpdatekitProducto(instance As kitProducto)
    End Sub
  Partial Private Sub DeletekitProducto(instance As kitProducto)
    End Sub
  Partial Private Sub Insertlocalidad(instance As localidad)
    End Sub
  Partial Private Sub Updatelocalidad(instance As localidad)
    End Sub
  Partial Private Sub Deletelocalidad(instance As localidad)
    End Sub
  Partial Private Sub InsertmedioPago(instance As medioPago)
    End Sub
  Partial Private Sub UpdatemedioPago(instance As medioPago)
    End Sub
  Partial Private Sub DeletemedioPago(instance As medioPago)
    End Sub
  Partial Private Sub InsertmovimientoCaja(instance As movimientoCaja)
    End Sub
  Partial Private Sub UpdatemovimientoCaja(instance As movimientoCaja)
    End Sub
  Partial Private Sub DeletemovimientoCaja(instance As movimientoCaja)
    End Sub
  Partial Private Sub InsertmovimientoCajaCheque(instance As movimientoCajaCheque)
    End Sub
  Partial Private Sub UpdatemovimientoCajaCheque(instance As movimientoCajaCheque)
    End Sub
  Partial Private Sub DeletemovimientoCajaCheque(instance As movimientoCajaCheque)
    End Sub
  Partial Private Sub InsertmovimientoStock(instance As movimientoStock)
    End Sub
  Partial Private Sub UpdatemovimientoStock(instance As movimientoStock)
    End Sub
  Partial Private Sub DeletemovimientoStock(instance As movimientoStock)
    End Sub
  Partial Private Sub InsertorigenCheque(instance As origenCheque)
    End Sub
  Partial Private Sub UpdateorigenCheque(instance As origenCheque)
    End Sub
  Partial Private Sub DeleteorigenCheque(instance As origenCheque)
    End Sub
  Partial Private Sub Insertpantalla(instance As pantalla)
    End Sub
  Partial Private Sub Updatepantalla(instance As pantalla)
    End Sub
  Partial Private Sub Deletepantalla(instance As pantalla)
    End Sub
  Partial Private Sub Insertprovincia(instance As provincia)
    End Sub
  Partial Private Sub Updateprovincia(instance As provincia)
    End Sub
  Partial Private Sub Deleteprovincia(instance As provincia)
    End Sub
  Partial Private Sub Insertremito(instance As remito)
    End Sub
  Partial Private Sub Updateremito(instance As remito)
    End Sub
  Partial Private Sub Deleteremito(instance As remito)
    End Sub
  Partial Private Sub InserttipoMovimiento(instance As tipoMovimiento)
    End Sub
  Partial Private Sub UpdatetipoMovimiento(instance As tipoMovimiento)
    End Sub
  Partial Private Sub DeletetipoMovimiento(instance As tipoMovimiento)
    End Sub
  Partial Private Sub InserttipoOrden(instance As tipoOrden)
    End Sub
  Partial Private Sub UpdatetipoOrden(instance As tipoOrden)
    End Sub
  Partial Private Sub DeletetipoOrden(instance As tipoOrden)
    End Sub
  Partial Private Sub InsertubicacionStock(instance As ubicacionStock)
    End Sub
  Partial Private Sub UpdateubicacionStock(instance As ubicacionStock)
    End Sub
  Partial Private Sub DeleteubicacionStock(instance As ubicacionStock)
    End Sub
  Partial Private Sub Insertusuario(instance As usuario)
    End Sub
  Partial Private Sub Updateusuario(instance As usuario)
    End Sub
  Partial Private Sub Deleteusuario(instance As usuario)
    End Sub
  Partial Private Sub InsertusuarioPantalla(instance As usuarioPantalla)
    End Sub
  Partial Private Sub UpdateusuarioPantalla(instance As usuarioPantalla)
    End Sub
  Partial Private Sub DeleteusuarioPantalla(instance As usuarioPantalla)
    End Sub
  Partial Private Sub Insertvendedor(instance As vendedor)
    End Sub
  Partial Private Sub Updatevendedor(instance As vendedor)
    End Sub
  Partial Private Sub Deletevendedor(instance As vendedor)
    End Sub
  Partial Private Sub InsertformaDeContacto(instance As formaDeContacto)
    End Sub
  Partial Private Sub UpdateformaDeContacto(instance As formaDeContacto)
    End Sub
  Partial Private Sub DeleteformaDeContacto(instance As formaDeContacto)
    End Sub
  Partial Private Sub InsertlistaDePrecio(instance As listaDePrecio)
    End Sub
  Partial Private Sub UpdatelistaDePrecio(instance As listaDePrecio)
    End Sub
  Partial Private Sub DeletelistaDePrecio(instance As listaDePrecio)
    End Sub
  Partial Private Sub Insertcliente(instance As cliente)
    End Sub
  Partial Private Sub Updatecliente(instance As cliente)
    End Sub
  Partial Private Sub Deletecliente(instance As cliente)
    End Sub
  Partial Private Sub Insertempresa(instance As empresa)
    End Sub
  Partial Private Sub Updateempresa(instance As empresa)
    End Sub
  Partial Private Sub Deleteempresa(instance As empresa)
    End Sub
  Partial Private Sub Insertproducto(instance As producto)
    End Sub
  Partial Private Sub Updateproducto(instance As producto)
    End Sub
  Partial Private Sub Deleteproducto(instance As producto)
    End Sub
  Partial Private Sub InsertcondicionPago(instance As condicionPago)
    End Sub
  Partial Private Sub UpdatecondicionPago(instance As condicionPago)
    End Sub
  Partial Private Sub DeletecondicionPago(instance As condicionPago)
    End Sub
  Partial Private Sub Insertproveedor(instance As proveedor)
    End Sub
  Partial Private Sub Updateproveedor(instance As proveedor)
    End Sub
  Partial Private Sub Deleteproveedor(instance As proveedor)
    End Sub
  Partial Private Sub Insertbanco(instance As banco)
    End Sub
  Partial Private Sub Updatebanco(instance As banco)
    End Sub
  Partial Private Sub Deletebanco(instance As banco)
    End Sub
  Partial Private Sub InsertformaDePago(instance As formaDePago)
    End Sub
  Partial Private Sub UpdateformaDePago(instance As formaDePago)
    End Sub
  Partial Private Sub DeleteformaDePago(instance As formaDePago)
    End Sub
  Partial Private Sub Insertfamilia(instance As familia)
    End Sub
  Partial Private Sub Updatefamilia(instance As familia)
    End Sub
  Partial Private Sub Deletefamilia(instance As familia)
    End Sub
  Partial Private Sub InsertlistaDePreciosItem(instance As listaDePreciosItem)
    End Sub
  Partial Private Sub UpdatelistaDePreciosItem(instance As listaDePreciosItem)
    End Sub
  Partial Private Sub DeletelistaDePreciosItem(instance As listaDePreciosItem)
    End Sub
  Partial Private Sub InsertcomprobanteItem(instance As comprobanteItem)
    End Sub
  Partial Private Sub UpdatecomprobanteItem(instance As comprobanteItem)
    End Sub
  Partial Private Sub DeletecomprobanteItem(instance As comprobanteItem)
    End Sub
  Partial Private Sub InsertcomprobanteCabe(instance As comprobanteCabe)
    End Sub
  Partial Private Sub UpdatecomprobanteCabe(instance As comprobanteCabe)
    End Sub
  Partial Private Sub DeletecomprobanteCabe(instance As comprobanteCabe)
    End Sub
  Partial Private Sub Insertcobro(instance As cobro)
    End Sub
  Partial Private Sub Updatecobro(instance As cobro)
    End Sub
  Partial Private Sub Deletecobro(instance As cobro)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Negocio.My.MySettings.Default.dherma2ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property alicuotaIvas() As System.Data.Linq.Table(Of alicuotaIva)
		Get
			Return Me.GetTable(Of alicuotaIva)
		End Get
	End Property
	
	Public ReadOnly Property cheques() As System.Data.Linq.Table(Of cheque)
		Get
			Return Me.GetTable(Of cheque)
		End Get
	End Property
	
	Public ReadOnly Property Tarjetas() As System.Data.Linq.Table(Of Tarjeta)
		Get
			Return Me.GetTable(Of Tarjeta)
		End Get
	End Property
	
	Public ReadOnly Property tipoTarjetas() As System.Data.Linq.Table(Of tipoTarjeta)
		Get
			Return Me.GetTable(Of tipoTarjeta)
		End Get
	End Property
	
	Public ReadOnly Property compraCabes() As System.Data.Linq.Table(Of compraCabe)
		Get
			Return Me.GetTable(Of compraCabe)
		End Get
	End Property
	
	Public ReadOnly Property compraItems() As System.Data.Linq.Table(Of compraItem)
		Get
			Return Me.GetTable(Of compraItem)
		End Get
	End Property
	
	Public ReadOnly Property condicionIvas() As System.Data.Linq.Table(Of condicionIva)
		Get
			Return Me.GetTable(Of condicionIva)
		End Get
	End Property
	
	Public ReadOnly Property depositos() As System.Data.Linq.Table(Of deposito)
		Get
			Return Me.GetTable(Of deposito)
		End Get
	End Property
	
	Public ReadOnly Property descripcionMovCajas() As System.Data.Linq.Table(Of descripcionMovCaja)
		Get
			Return Me.GetTable(Of descripcionMovCaja)
		End Get
	End Property
	
	Public ReadOnly Property estadoPedidos() As System.Data.Linq.Table(Of estadoPedido)
		Get
			Return Me.GetTable(Of estadoPedido)
		End Get
	End Property
	
	Public ReadOnly Property kits() As System.Data.Linq.Table(Of kit)
		Get
			Return Me.GetTable(Of kit)
		End Get
	End Property
	
	Public ReadOnly Property kitProductos() As System.Data.Linq.Table(Of kitProducto)
		Get
			Return Me.GetTable(Of kitProducto)
		End Get
	End Property
	
	Public ReadOnly Property localidads() As System.Data.Linq.Table(Of localidad)
		Get
			Return Me.GetTable(Of localidad)
		End Get
	End Property
	
	Public ReadOnly Property medioPagos() As System.Data.Linq.Table(Of medioPago)
		Get
			Return Me.GetTable(Of medioPago)
		End Get
	End Property
	
	Public ReadOnly Property movimientoCajas() As System.Data.Linq.Table(Of movimientoCaja)
		Get
			Return Me.GetTable(Of movimientoCaja)
		End Get
	End Property
	
	Public ReadOnly Property movimientoCajaCheques() As System.Data.Linq.Table(Of movimientoCajaCheque)
		Get
			Return Me.GetTable(Of movimientoCajaCheque)
		End Get
	End Property
	
	Public ReadOnly Property movimientoStocks() As System.Data.Linq.Table(Of movimientoStock)
		Get
			Return Me.GetTable(Of movimientoStock)
		End Get
	End Property
	
	Public ReadOnly Property origenCheques() As System.Data.Linq.Table(Of origenCheque)
		Get
			Return Me.GetTable(Of origenCheque)
		End Get
	End Property
	
	Public ReadOnly Property pantallas() As System.Data.Linq.Table(Of pantalla)
		Get
			Return Me.GetTable(Of pantalla)
		End Get
	End Property
	
	Public ReadOnly Property provincias() As System.Data.Linq.Table(Of provincia)
		Get
			Return Me.GetTable(Of provincia)
		End Get
	End Property
	
	Public ReadOnly Property remitos() As System.Data.Linq.Table(Of remito)
		Get
			Return Me.GetTable(Of remito)
		End Get
	End Property
	
	Public ReadOnly Property tipoMovimientos() As System.Data.Linq.Table(Of tipoMovimiento)
		Get
			Return Me.GetTable(Of tipoMovimiento)
		End Get
	End Property
	
	Public ReadOnly Property tipoOrdens() As System.Data.Linq.Table(Of tipoOrden)
		Get
			Return Me.GetTable(Of tipoOrden)
		End Get
	End Property
	
	Public ReadOnly Property ubicacionStocks() As System.Data.Linq.Table(Of ubicacionStock)
		Get
			Return Me.GetTable(Of ubicacionStock)
		End Get
	End Property
	
	Public ReadOnly Property usuarios() As System.Data.Linq.Table(Of usuario)
		Get
			Return Me.GetTable(Of usuario)
		End Get
	End Property
	
	Public ReadOnly Property usuarioPantallas() As System.Data.Linq.Table(Of usuarioPantalla)
		Get
			Return Me.GetTable(Of usuarioPantalla)
		End Get
	End Property
	
	Public ReadOnly Property vendedors() As System.Data.Linq.Table(Of vendedor)
		Get
			Return Me.GetTable(Of vendedor)
		End Get
	End Property
	
	Public ReadOnly Property formaDeContactos() As System.Data.Linq.Table(Of formaDeContacto)
		Get
			Return Me.GetTable(Of formaDeContacto)
		End Get
	End Property
	
	Public ReadOnly Property listaDePrecios() As System.Data.Linq.Table(Of listaDePrecio)
		Get
			Return Me.GetTable(Of listaDePrecio)
		End Get
	End Property
	
	Public ReadOnly Property clientes() As System.Data.Linq.Table(Of cliente)
		Get
			Return Me.GetTable(Of cliente)
		End Get
	End Property
	
	Public ReadOnly Property empresas() As System.Data.Linq.Table(Of empresa)
		Get
			Return Me.GetTable(Of empresa)
		End Get
	End Property
	
	Public ReadOnly Property productos() As System.Data.Linq.Table(Of producto)
		Get
			Return Me.GetTable(Of producto)
		End Get
	End Property
	
	Public ReadOnly Property condicionPagos() As System.Data.Linq.Table(Of condicionPago)
		Get
			Return Me.GetTable(Of condicionPago)
		End Get
	End Property
	
	Public ReadOnly Property proveedors() As System.Data.Linq.Table(Of proveedor)
		Get
			Return Me.GetTable(Of proveedor)
		End Get
	End Property
	
	Public ReadOnly Property bancos() As System.Data.Linq.Table(Of banco)
		Get
			Return Me.GetTable(Of banco)
		End Get
	End Property
	
	Public ReadOnly Property formaDePagos() As System.Data.Linq.Table(Of formaDePago)
		Get
			Return Me.GetTable(Of formaDePago)
		End Get
	End Property
	
	Public ReadOnly Property familias() As System.Data.Linq.Table(Of familia)
		Get
			Return Me.GetTable(Of familia)
		End Get
	End Property
	
	Public ReadOnly Property listaDePreciosItems() As System.Data.Linq.Table(Of listaDePreciosItem)
		Get
			Return Me.GetTable(Of listaDePreciosItem)
		End Get
	End Property
	
	Public ReadOnly Property comprobanteAsociados() As System.Data.Linq.Table(Of comprobanteAsociado)
		Get
			Return Me.GetTable(Of comprobanteAsociado)
		End Get
	End Property
	
	Public ReadOnly Property comprobanteItems() As System.Data.Linq.Table(Of comprobanteItem)
		Get
			Return Me.GetTable(Of comprobanteItem)
		End Get
	End Property
	
	Public ReadOnly Property comprobanteCabes() As System.Data.Linq.Table(Of comprobanteCabe)
		Get
			Return Me.GetTable(Of comprobanteCabe)
		End Get
	End Property
	
	Public ReadOnly Property cobros() As System.Data.Linq.Table(Of cobro)
		Get
			Return Me.GetTable(Of cobro)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PermisosVistaAjax")>  _
	Public Function PermisosVistaAjax(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of PermisosVistaAjaxResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of PermisosVistaAjaxResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usuarioVistaAjax")>  _
	Public Function usuarioVistaAjax(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of usuarioVistaAjaxResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of usuarioVistaAjaxResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CompraSSaldarVista", IsComposable:=true)>  _
	Public Function CompraSSaldarVista(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ProveedorVistaPorCuitORazon")>  _
	Public Function ProveedorVistaPorCuitORazon(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of ProveedorVistaPorCuitORazonResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of ProveedorVistaPorCuitORazonResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.VistaProductoStockByDecripcion")>  _
	Public Function VistaProductoStockByDecripcion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of VistaProductoStockByDecripcionResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of VistaProductoStockByDecripcionResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ClienteVistaPorCuitORazon")>  _
	Public Function ClienteVistaPorCuitORazon(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of ClienteVistaPorCuitORazonResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of ClienteVistaPorCuitORazonResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ProductoVistaPorCodODescripcion")>  _
	Public Function ProductoVistaPorCodODescripcion(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String) As ISingleResult(Of ProductoVistaPorCodODescripcionResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion)
		Return CType(result.ReturnValue,ISingleResult(Of ProductoVistaPorCodODescripcionResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ProductoVistaByCodODescripcionYCliente")>  _
	Public Function ProductoVistaByCodODescripcionYCliente(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal descripcion As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal idCliente As System.Nullable(Of Integer)) As ISingleResult(Of ProductoVistaByCodODescripcionYClienteResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), descripcion, idCliente)
		Return CType(result.ReturnValue,ISingleResult(Of ProductoVistaByCodODescripcionYClienteResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.fcnSaldoPendienteByComprobante", IsComposable:=true)>  _
	Public Function fcnSaldoPendienteByComprobante(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal idComprobanteCabe As System.Nullable(Of Integer)) As System.Nullable(Of Double)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), idComprobanteCabe).ReturnValue,System.Nullable(Of Double))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.alicuotaIva")>  _
Partial Public Class alicuotaIva
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idAlicuotaIva As Integer
	
	Private _valor As System.Nullable(Of Double)
	
	Private _descripcion As String
	
	Private _productos As EntitySet(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidAlicuotaIvaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidAlicuotaIvaChanged()
    End Sub
    Partial Private Sub OnvalorChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnvalorChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._productos = New EntitySet(Of producto)(AddressOf Me.attach_productos, AddressOf Me.detach_productos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idAlicuotaIva", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idAlicuotaIva() As Integer
		Get
			Return Me._idAlicuotaIva
		End Get
		Set
			If ((Me._idAlicuotaIva = value)  _
						= false) Then
				Me.OnidAlicuotaIvaChanging(value)
				Me.SendPropertyChanging
				Me._idAlicuotaIva = value
				Me.SendPropertyChanged("idAlicuotaIva")
				Me.OnidAlicuotaIvaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_valor", DbType:="Float")>  _
	Public Property valor() As System.Nullable(Of Double)
		Get
			Return Me._valor
		End Get
		Set
			If (Me._valor.Equals(value) = false) Then
				Me.OnvalorChanging(value)
				Me.SendPropertyChanging
				Me._valor = value
				Me.SendPropertyChanged("valor")
				Me.OnvalorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="alicuotaIva_producto", Storage:="_productos", ThisKey:="idAlicuotaIva", OtherKey:="idAlicuotaIva")>  _
	Public Property productos() As EntitySet(Of producto)
		Get
			Return Me._productos
		End Get
		Set
			Me._productos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_productos(ByVal entity As producto)
		Me.SendPropertyChanging
		entity.alicuotaIva = Me
	End Sub
	
	Private Sub detach_productos(ByVal entity As producto)
		Me.SendPropertyChanging
		entity.alicuotaIva = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cheque")>  _
Partial Public Class cheque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCheque As Integer
	
	Private _idBanco As System.Nullable(Of Integer)
	
	Private _numero As String
	
	Private _fechaEmision As System.Nullable(Of Date)
	
	Private _fechaVencimiento As System.Nullable(Of Date)
	
	Private _importe As System.Nullable(Of Double)
	
	Private _idOrigenCheque As System.Nullable(Of Integer)
	
	Private _enCartera As System.Nullable(Of Boolean)
	
	Private _cobrado As System.Nullable(Of Boolean)
	
	Private _depositos As EntitySet(Of deposito)
	
	Private _movimientoCajaCheques As EntitySet(Of movimientoCajaCheque)
	
	Private _banco As EntityRef(Of banco)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChequeChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChequeChanged()
    End Sub
    Partial Private Sub OnidBancoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidBancoChanged()
    End Sub
    Partial Private Sub OnnumeroChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroChanged()
    End Sub
    Partial Private Sub OnfechaEmisionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaEmisionChanged()
    End Sub
    Partial Private Sub OnfechaVencimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaVencimientoChanged()
    End Sub
    Partial Private Sub OnimporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnimporteChanged()
    End Sub
    Partial Private Sub OnidOrigenChequeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidOrigenChequeChanged()
    End Sub
    Partial Private Sub OnenCarteraChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenCarteraChanged()
    End Sub
    Partial Private Sub OncobradoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncobradoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._depositos = New EntitySet(Of deposito)(AddressOf Me.attach_depositos, AddressOf Me.detach_depositos)
		Me._movimientoCajaCheques = New EntitySet(Of movimientoCajaCheque)(AddressOf Me.attach_movimientoCajaCheques, AddressOf Me.detach_movimientoCajaCheques)
		Me._banco = CType(Nothing, EntityRef(Of banco))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCheque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCheque() As Integer
		Get
			Return Me._idCheque
		End Get
		Set
			If ((Me._idCheque = value)  _
						= false) Then
				Me.OnidChequeChanging(value)
				Me.SendPropertyChanging
				Me._idCheque = value
				Me.SendPropertyChanged("idCheque")
				Me.OnidChequeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idBanco", DbType:="Int")>  _
	Public Property idBanco() As System.Nullable(Of Integer)
		Get
			Return Me._idBanco
		End Get
		Set
			If (Me._idBanco.Equals(value) = false) Then
				If Me._banco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidBancoChanging(value)
				Me.SendPropertyChanging
				Me._idBanco = value
				Me.SendPropertyChanged("idBanco")
				Me.OnidBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numero", DbType:="VarChar(50)")>  _
	Public Property numero() As String
		Get
			Return Me._numero
		End Get
		Set
			If (String.Equals(Me._numero, value) = false) Then
				Me.OnnumeroChanging(value)
				Me.SendPropertyChanging
				Me._numero = value
				Me.SendPropertyChanged("numero")
				Me.OnnumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaEmision", DbType:="DateTime")>  _
	Public Property fechaEmision() As System.Nullable(Of Date)
		Get
			Return Me._fechaEmision
		End Get
		Set
			If (Me._fechaEmision.Equals(value) = false) Then
				Me.OnfechaEmisionChanging(value)
				Me.SendPropertyChanging
				Me._fechaEmision = value
				Me.SendPropertyChanged("fechaEmision")
				Me.OnfechaEmisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaVencimiento", DbType:="DateTime")>  _
	Public Property fechaVencimiento() As System.Nullable(Of Date)
		Get
			Return Me._fechaVencimiento
		End Get
		Set
			If (Me._fechaVencimiento.Equals(value) = false) Then
				Me.OnfechaVencimientoChanging(value)
				Me.SendPropertyChanging
				Me._fechaVencimiento = value
				Me.SendPropertyChanged("fechaVencimiento")
				Me.OnfechaVencimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importe", DbType:="Float")>  _
	Public Property importe() As System.Nullable(Of Double)
		Get
			Return Me._importe
		End Get
		Set
			If (Me._importe.Equals(value) = false) Then
				Me.OnimporteChanging(value)
				Me.SendPropertyChanging
				Me._importe = value
				Me.SendPropertyChanged("importe")
				Me.OnimporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idOrigenCheque", DbType:="Int")>  _
	Public Property idOrigenCheque() As System.Nullable(Of Integer)
		Get
			Return Me._idOrigenCheque
		End Get
		Set
			If (Me._idOrigenCheque.Equals(value) = false) Then
				Me.OnidOrigenChequeChanging(value)
				Me.SendPropertyChanging
				Me._idOrigenCheque = value
				Me.SendPropertyChanged("idOrigenCheque")
				Me.OnidOrigenChequeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enCartera", DbType:="Bit")>  _
	Public Property enCartera() As System.Nullable(Of Boolean)
		Get
			Return Me._enCartera
		End Get
		Set
			If (Me._enCartera.Equals(value) = false) Then
				Me.OnenCarteraChanging(value)
				Me.SendPropertyChanging
				Me._enCartera = value
				Me.SendPropertyChanged("enCartera")
				Me.OnenCarteraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cobrado", DbType:="Bit")>  _
	Public Property cobrado() As System.Nullable(Of Boolean)
		Get
			Return Me._cobrado
		End Get
		Set
			If (Me._cobrado.Equals(value) = false) Then
				Me.OncobradoChanging(value)
				Me.SendPropertyChanging
				Me._cobrado = value
				Me.SendPropertyChanged("cobrado")
				Me.OncobradoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cheque_deposito", Storage:="_depositos", ThisKey:="idCheque", OtherKey:="idCheque")>  _
	Public Property depositos() As EntitySet(Of deposito)
		Get
			Return Me._depositos
		End Get
		Set
			Me._depositos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cheque_movimientoCajaCheque", Storage:="_movimientoCajaCheques", ThisKey:="idCheque", OtherKey:="idCheque")>  _
	Public Property movimientoCajaCheques() As EntitySet(Of movimientoCajaCheque)
		Get
			Return Me._movimientoCajaCheques
		End Get
		Set
			Me._movimientoCajaCheques.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="banco_cheque", Storage:="_banco", ThisKey:="idBanco", OtherKey:="idBanco", IsForeignKey:=true)>  _
	Public Property banco() As banco
		Get
			Return Me._banco.Entity
		End Get
		Set
			Dim previousValue As banco = Me._banco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._banco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._banco.Entity = Nothing
					previousValue.cheques.Remove(Me)
				End If
				Me._banco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cheques.Add(Me)
					Me._idBanco = value.idBanco
				Else
					Me._idBanco = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("banco")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_depositos(ByVal entity As deposito)
		Me.SendPropertyChanging
		entity.cheque = Me
	End Sub
	
	Private Sub detach_depositos(ByVal entity As deposito)
		Me.SendPropertyChanging
		entity.cheque = Nothing
	End Sub
	
	Private Sub attach_movimientoCajaCheques(ByVal entity As movimientoCajaCheque)
		Me.SendPropertyChanging
		entity.cheque = Me
	End Sub
	
	Private Sub detach_movimientoCajaCheques(ByVal entity As movimientoCajaCheque)
		Me.SendPropertyChanging
		entity.cheque = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tarjeta")>  _
Partial Public Class Tarjeta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idTarjeta As Integer
	
	Private _numero As String
	
	Private _idTipoTarjeta As System.Nullable(Of Integer)
	
	Private _nombre As String
	
	Private _codigoSeguridad As System.Nullable(Of Short)
	
	Private _fechaVencimiento As System.Nullable(Of Date)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTarjetaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTarjetaChanged()
    End Sub
    Partial Private Sub OnnumeroChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroChanged()
    End Sub
    Partial Private Sub OnidTipoTarjetaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoTarjetaChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub OncodigoSeguridadChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OncodigoSeguridadChanged()
    End Sub
    Partial Private Sub OnfechaVencimientoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaVencimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTarjeta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idTarjeta() As Integer
		Get
			Return Me._idTarjeta
		End Get
		Set
			If ((Me._idTarjeta = value)  _
						= false) Then
				Me.OnidTarjetaChanging(value)
				Me.SendPropertyChanging
				Me._idTarjeta = value
				Me.SendPropertyChanged("idTarjeta")
				Me.OnidTarjetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numero", DbType:="VarChar(20)")>  _
	Public Property numero() As String
		Get
			Return Me._numero
		End Get
		Set
			If (String.Equals(Me._numero, value) = false) Then
				Me.OnnumeroChanging(value)
				Me.SendPropertyChanging
				Me._numero = value
				Me.SendPropertyChanged("numero")
				Me.OnnumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoTarjeta", DbType:="Int")>  _
	Public Property idTipoTarjeta() As System.Nullable(Of Integer)
		Get
			Return Me._idTipoTarjeta
		End Get
		Set
			If (Me._idTipoTarjeta.Equals(value) = false) Then
				Me.OnidTipoTarjetaChanging(value)
				Me.SendPropertyChanging
				Me._idTipoTarjeta = value
				Me.SendPropertyChanged("idTipoTarjeta")
				Me.OnidTipoTarjetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(100)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigoSeguridad", DbType:="SmallInt")>  _
	Public Property codigoSeguridad() As System.Nullable(Of Short)
		Get
			Return Me._codigoSeguridad
		End Get
		Set
			If (Me._codigoSeguridad.Equals(value) = false) Then
				Me.OncodigoSeguridadChanging(value)
				Me.SendPropertyChanging
				Me._codigoSeguridad = value
				Me.SendPropertyChanged("codigoSeguridad")
				Me.OncodigoSeguridadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaVencimiento", DbType:="Date")>  _
	Public Property fechaVencimiento() As System.Nullable(Of Date)
		Get
			Return Me._fechaVencimiento
		End Get
		Set
			If (Me._fechaVencimiento.Equals(value) = false) Then
				Me.OnfechaVencimientoChanging(value)
				Me.SendPropertyChanging
				Me._fechaVencimiento = value
				Me.SendPropertyChanged("fechaVencimiento")
				Me.OnfechaVencimientoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipoTarjeta")>  _
Partial Public Class tipoTarjeta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idTipoTarjeta As Integer
	
	Private _descripcion As String
	
	Private _cobros As EntitySet(Of cobro)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTipoTarjetaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTipoTarjetaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cobros = New EntitySet(Of cobro)(AddressOf Me.attach_cobros, AddressOf Me.detach_cobros)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoTarjeta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idTipoTarjeta() As Integer
		Get
			Return Me._idTipoTarjeta
		End Get
		Set
			If ((Me._idTipoTarjeta = value)  _
						= false) Then
				Me.OnidTipoTarjetaChanging(value)
				Me.SendPropertyChanging
				Me._idTipoTarjeta = value
				Me.SendPropertyChanged("idTipoTarjeta")
				Me.OnidTipoTarjetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoTarjeta_cobro", Storage:="_cobros", ThisKey:="idTipoTarjeta", OtherKey:="idTipoTarjeta")>  _
	Public Property cobros() As EntitySet(Of cobro)
		Get
			Return Me._cobros
		End Get
		Set
			Me._cobros.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cobros(ByVal entity As cobro)
		Me.SendPropertyChanging
		entity.tipoTarjeta = Me
	End Sub
	
	Private Sub detach_cobros(ByVal entity As cobro)
		Me.SendPropertyChanging
		entity.tipoTarjeta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.compraCabe")>  _
Partial Public Class compraCabe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCompraCabe As Integer
	
	Private _fechaCompra As System.Nullable(Of Date)
	
	Private _idEstado As System.Nullable(Of Integer)
	
	Private _observaciones As String
	
	Private _idTipoOrden As System.Nullable(Of Integer)
	
	Private _idUbicacionStock As System.Nullable(Of Integer)
	
	Private _idProveedor As System.Nullable(Of Integer)
	
	Private _compraItems As EntitySet(Of compraItem)
	
	Private _estadoPedido As EntityRef(Of estadoPedido)
	
	Private _tipoOrden As EntityRef(Of tipoOrden)
	
	Private _ubicacionStock As EntityRef(Of ubicacionStock)
	
	Private _proveedor As EntityRef(Of proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCompraCabeChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCompraCabeChanged()
    End Sub
    Partial Private Sub OnfechaCompraChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaCompraChanged()
    End Sub
    Partial Private Sub OnidEstadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEstadoChanged()
    End Sub
    Partial Private Sub OnobservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionesChanged()
    End Sub
    Partial Private Sub OnidTipoOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoOrdenChanged()
    End Sub
    Partial Private Sub OnidUbicacionStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidUbicacionStockChanged()
    End Sub
    Partial Private Sub OnidProveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProveedorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraItems = New EntitySet(Of compraItem)(AddressOf Me.attach_compraItems, AddressOf Me.detach_compraItems)
		Me._estadoPedido = CType(Nothing, EntityRef(Of estadoPedido))
		Me._tipoOrden = CType(Nothing, EntityRef(Of tipoOrden))
		Me._ubicacionStock = CType(Nothing, EntityRef(Of ubicacionStock))
		Me._proveedor = CType(Nothing, EntityRef(Of proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCompraCabe", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCompraCabe() As Integer
		Get
			Return Me._idCompraCabe
		End Get
		Set
			If ((Me._idCompraCabe = value)  _
						= false) Then
				Me.OnidCompraCabeChanging(value)
				Me.SendPropertyChanging
				Me._idCompraCabe = value
				Me.SendPropertyChanged("idCompraCabe")
				Me.OnidCompraCabeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaCompra", DbType:="DateTime")>  _
	Public Property fechaCompra() As System.Nullable(Of Date)
		Get
			Return Me._fechaCompra
		End Get
		Set
			If (Me._fechaCompra.Equals(value) = false) Then
				Me.OnfechaCompraChanging(value)
				Me.SendPropertyChanging
				Me._fechaCompra = value
				Me.SendPropertyChanged("fechaCompra")
				Me.OnfechaCompraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstado", DbType:="Int")>  _
	Public Property idEstado() As System.Nullable(Of Integer)
		Get
			Return Me._idEstado
		End Get
		Set
			If (Me._idEstado.Equals(value) = false) Then
				If Me._estadoPedido.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEstadoChanging(value)
				Me.SendPropertyChanging
				Me._idEstado = value
				Me.SendPropertyChanged("idEstado")
				Me.OnidEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observaciones", DbType:="VarChar(250)")>  _
	Public Property observaciones() As String
		Get
			Return Me._observaciones
		End Get
		Set
			If (String.Equals(Me._observaciones, value) = false) Then
				Me.OnobservacionesChanging(value)
				Me.SendPropertyChanging
				Me._observaciones = value
				Me.SendPropertyChanged("observaciones")
				Me.OnobservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoOrden", DbType:="Int")>  _
	Public Property idTipoOrden() As System.Nullable(Of Integer)
		Get
			Return Me._idTipoOrden
		End Get
		Set
			If (Me._idTipoOrden.Equals(value) = false) Then
				If Me._tipoOrden.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTipoOrdenChanging(value)
				Me.SendPropertyChanging
				Me._idTipoOrden = value
				Me.SendPropertyChanged("idTipoOrden")
				Me.OnidTipoOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUbicacionStock", DbType:="Int")>  _
	Public Property idUbicacionStock() As System.Nullable(Of Integer)
		Get
			Return Me._idUbicacionStock
		End Get
		Set
			If (Me._idUbicacionStock.Equals(value) = false) Then
				If Me._ubicacionStock.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidUbicacionStockChanging(value)
				Me.SendPropertyChanging
				Me._idUbicacionStock = value
				Me.SendPropertyChanged("idUbicacionStock")
				Me.OnidUbicacionStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProveedor", DbType:="Int")>  _
	Public Property idProveedor() As System.Nullable(Of Integer)
		Get
			Return Me._idProveedor
		End Get
		Set
			If (Me._idProveedor.Equals(value) = false) Then
				If Me._proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProveedorChanging(value)
				Me.SendPropertyChanging
				Me._idProveedor = value
				Me.SendPropertyChanged("idProveedor")
				Me.OnidProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="compraCabe_compraItem", Storage:="_compraItems", ThisKey:="idCompraCabe", OtherKey:="idCompra")>  _
	Public Property compraItems() As EntitySet(Of compraItem)
		Get
			Return Me._compraItems
		End Get
		Set
			Me._compraItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="estadoPedido_compraCabe", Storage:="_estadoPedido", ThisKey:="idEstado", OtherKey:="idEstadoPedido", IsForeignKey:=true)>  _
	Public Property estadoPedido() As estadoPedido
		Get
			Return Me._estadoPedido.Entity
		End Get
		Set
			Dim previousValue As estadoPedido = Me._estadoPedido.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._estadoPedido.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._estadoPedido.Entity = Nothing
					previousValue.compraCabes.Remove(Me)
				End If
				Me._estadoPedido.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.compraCabes.Add(Me)
					Me._idEstado = value.idEstadoPedido
				Else
					Me._idEstado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("estadoPedido")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoOrden_compraCabe", Storage:="_tipoOrden", ThisKey:="idTipoOrden", OtherKey:="idTipoOrden", IsForeignKey:=true)>  _
	Public Property tipoOrden() As tipoOrden
		Get
			Return Me._tipoOrden.Entity
		End Get
		Set
			Dim previousValue As tipoOrden = Me._tipoOrden.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipoOrden.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipoOrden.Entity = Nothing
					previousValue.compraCabes.Remove(Me)
				End If
				Me._tipoOrden.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.compraCabes.Add(Me)
					Me._idTipoOrden = value.idTipoOrden
				Else
					Me._idTipoOrden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipoOrden")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_compraCabe", Storage:="_ubicacionStock", ThisKey:="idUbicacionStock", OtherKey:="idUbicacionStock", IsForeignKey:=true)>  _
	Public Property ubicacionStock() As ubicacionStock
		Get
			Return Me._ubicacionStock.Entity
		End Get
		Set
			Dim previousValue As ubicacionStock = Me._ubicacionStock.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacionStock.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacionStock.Entity = Nothing
					previousValue.compraCabes.Remove(Me)
				End If
				Me._ubicacionStock.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.compraCabes.Add(Me)
					Me._idUbicacionStock = value.idUbicacionStock
				Else
					Me._idUbicacionStock = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacionStock")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="proveedor_compraCabe", Storage:="_proveedor", ThisKey:="idProveedor", OtherKey:="idProveedor", IsForeignKey:=true)>  _
	Public Property proveedor() As proveedor
		Get
			Return Me._proveedor.Entity
		End Get
		Set
			Dim previousValue As proveedor = Me._proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._proveedor.Entity = Nothing
					previousValue.compraCabes.Remove(Me)
				End If
				Me._proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.compraCabes.Add(Me)
					Me._idProveedor = value.idProveedor
				Else
					Me._idProveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_compraItems(ByVal entity As compraItem)
		Me.SendPropertyChanging
		entity.compraCabe = Me
	End Sub
	
	Private Sub detach_compraItems(ByVal entity As compraItem)
		Me.SendPropertyChanging
		entity.compraCabe = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.compraItem")>  _
Partial Public Class compraItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCompraItem As Integer
	
	Private _idCompra As System.Nullable(Of Integer)
	
	Private _idProducto As System.Nullable(Of Integer)
	
	Private _cantidad As System.Nullable(Of Integer)
	
	Private _precioUnitario As System.Nullable(Of Double)
	
	Private _observaciones As String
	
	Private _compraCabe As EntityRef(Of compraCabe)
	
	Private _producto As EntityRef(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCompraItemChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCompraItemChanged()
    End Sub
    Partial Private Sub OnidCompraChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidCompraChanged()
    End Sub
    Partial Private Sub OnidProductoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProductoChanged()
    End Sub
    Partial Private Sub OncantidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub OnprecioUnitarioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnprecioUnitarioChanged()
    End Sub
    Partial Private Sub OnobservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraCabe = CType(Nothing, EntityRef(Of compraCabe))
		Me._producto = CType(Nothing, EntityRef(Of producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCompraItem", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCompraItem() As Integer
		Get
			Return Me._idCompraItem
		End Get
		Set
			If ((Me._idCompraItem = value)  _
						= false) Then
				Me.OnidCompraItemChanging(value)
				Me.SendPropertyChanging
				Me._idCompraItem = value
				Me.SendPropertyChanged("idCompraItem")
				Me.OnidCompraItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCompra", DbType:="Int")>  _
	Public Property idCompra() As System.Nullable(Of Integer)
		Get
			Return Me._idCompra
		End Get
		Set
			If (Me._idCompra.Equals(value) = false) Then
				If Me._compraCabe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidCompraChanging(value)
				Me.SendPropertyChanging
				Me._idCompra = value
				Me.SendPropertyChanged("idCompra")
				Me.OnidCompraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProducto", DbType:="Int")>  _
	Public Property idProducto() As System.Nullable(Of Integer)
		Get
			Return Me._idProducto
		End Get
		Set
			If (Me._idProducto.Equals(value) = false) Then
				If Me._producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProductoChanging(value)
				Me.SendPropertyChanging
				Me._idProducto = value
				Me.SendPropertyChanged("idProducto")
				Me.OnidProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="Int")>  _
	Public Property cantidad() As System.Nullable(Of Integer)
		Get
			Return Me._cantidad
		End Get
		Set
			If (Me._cantidad.Equals(value) = false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precioUnitario", DbType:="Float")>  _
	Public Property precioUnitario() As System.Nullable(Of Double)
		Get
			Return Me._precioUnitario
		End Get
		Set
			If (Me._precioUnitario.Equals(value) = false) Then
				Me.OnprecioUnitarioChanging(value)
				Me.SendPropertyChanging
				Me._precioUnitario = value
				Me.SendPropertyChanged("precioUnitario")
				Me.OnprecioUnitarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observaciones", DbType:="VarChar(250)")>  _
	Public Property observaciones() As String
		Get
			Return Me._observaciones
		End Get
		Set
			If (String.Equals(Me._observaciones, value) = false) Then
				Me.OnobservacionesChanging(value)
				Me.SendPropertyChanging
				Me._observaciones = value
				Me.SendPropertyChanged("observaciones")
				Me.OnobservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="compraCabe_compraItem", Storage:="_compraCabe", ThisKey:="idCompra", OtherKey:="idCompraCabe", IsForeignKey:=true)>  _
	Public Property compraCabe() As compraCabe
		Get
			Return Me._compraCabe.Entity
		End Get
		Set
			Dim previousValue As compraCabe = Me._compraCabe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._compraCabe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._compraCabe.Entity = Nothing
					previousValue.compraItems.Remove(Me)
				End If
				Me._compraCabe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.compraItems.Add(Me)
					Me._idCompra = value.idCompraCabe
				Else
					Me._idCompra = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("compraCabe")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_compraItem", Storage:="_producto", ThisKey:="idProducto", OtherKey:="idProducto", IsForeignKey:=true)>  _
	Public Property producto() As producto
		Get
			Return Me._producto.Entity
		End Get
		Set
			Dim previousValue As producto = Me._producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._producto.Entity = Nothing
					previousValue.compraItems.Remove(Me)
				End If
				Me._producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.compraItems.Add(Me)
					Me._idProducto = value.idProducto
				Else
					Me._idProducto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.condicionIva")>  _
Partial Public Class condicionIva
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCondicionIva As Integer
	
	Private _descripcion As String
	
	Private _letra As Char
	
	Private _clientes As EntitySet(Of cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCondicionIvaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCondicionIvaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnletraChanging(value As Char)
    End Sub
    Partial Private Sub OnletraChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._clientes = New EntitySet(Of cliente)(AddressOf Me.attach_clientes, AddressOf Me.detach_clientes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCondicionIva", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCondicionIva() As Integer
		Get
			Return Me._idCondicionIva
		End Get
		Set
			If ((Me._idCondicionIva = value)  _
						= false) Then
				Me.OnidCondicionIvaChanging(value)
				Me.SendPropertyChanging
				Me._idCondicionIva = value
				Me.SendPropertyChanged("idCondicionIva")
				Me.OnidCondicionIvaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_letra", DbType:="Char(1) NOT NULL")>  _
	Public Property letra() As Char
		Get
			Return Me._letra
		End Get
		Set
			If ((Me._letra = value)  _
						= false) Then
				Me.OnletraChanging(value)
				Me.SendPropertyChanging
				Me._letra = value
				Me.SendPropertyChanged("letra")
				Me.OnletraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="condicionIva_cliente", Storage:="_clientes", ThisKey:="idCondicionIva", OtherKey:="idCondicionIva")>  _
	Public Property clientes() As EntitySet(Of cliente)
		Get
			Return Me._clientes
		End Get
		Set
			Me._clientes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.condicionIva = Me
	End Sub
	
	Private Sub detach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.condicionIva = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.deposito")>  _
Partial Public Class deposito
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idDeposito As Integer
	
	Private _idCheque As System.Nullable(Of Integer)
	
	Private _idBanco As System.Nullable(Of Integer)
	
	Private _numeroTransaccion As String
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _cheque As EntityRef(Of cheque)
	
	Private _banco As EntityRef(Of banco)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidDepositoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidDepositoChanged()
    End Sub
    Partial Private Sub OnidChequeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidChequeChanged()
    End Sub
    Partial Private Sub OnidBancoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidBancoChanged()
    End Sub
    Partial Private Sub OnnumeroTransaccionChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroTransaccionChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cheque = CType(Nothing, EntityRef(Of cheque))
		Me._banco = CType(Nothing, EntityRef(Of banco))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idDeposito", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idDeposito() As Integer
		Get
			Return Me._idDeposito
		End Get
		Set
			If ((Me._idDeposito = value)  _
						= false) Then
				Me.OnidDepositoChanging(value)
				Me.SendPropertyChanging
				Me._idDeposito = value
				Me.SendPropertyChanged("idDeposito")
				Me.OnidDepositoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCheque", DbType:="Int")>  _
	Public Property idCheque() As System.Nullable(Of Integer)
		Get
			Return Me._idCheque
		End Get
		Set
			If (Me._idCheque.Equals(value) = false) Then
				If Me._cheque.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChequeChanging(value)
				Me.SendPropertyChanging
				Me._idCheque = value
				Me.SendPropertyChanged("idCheque")
				Me.OnidChequeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idBanco", DbType:="Int")>  _
	Public Property idBanco() As System.Nullable(Of Integer)
		Get
			Return Me._idBanco
		End Get
		Set
			If (Me._idBanco.Equals(value) = false) Then
				If Me._banco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidBancoChanging(value)
				Me.SendPropertyChanging
				Me._idBanco = value
				Me.SendPropertyChanged("idBanco")
				Me.OnidBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numeroTransaccion", DbType:="VarChar(20)")>  _
	Public Property numeroTransaccion() As String
		Get
			Return Me._numeroTransaccion
		End Get
		Set
			If (String.Equals(Me._numeroTransaccion, value) = false) Then
				Me.OnnumeroTransaccionChanging(value)
				Me.SendPropertyChanging
				Me._numeroTransaccion = value
				Me.SendPropertyChanged("numeroTransaccion")
				Me.OnnumeroTransaccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="Date")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cheque_deposito", Storage:="_cheque", ThisKey:="idCheque", OtherKey:="idCheque", IsForeignKey:=true)>  _
	Public Property cheque() As cheque
		Get
			Return Me._cheque.Entity
		End Get
		Set
			Dim previousValue As cheque = Me._cheque.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cheque.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cheque.Entity = Nothing
					previousValue.depositos.Remove(Me)
				End If
				Me._cheque.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.depositos.Add(Me)
					Me._idCheque = value.idCheque
				Else
					Me._idCheque = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("cheque")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="banco_deposito", Storage:="_banco", ThisKey:="idBanco", OtherKey:="idBanco", IsForeignKey:=true)>  _
	Public Property banco() As banco
		Get
			Return Me._banco.Entity
		End Get
		Set
			Dim previousValue As banco = Me._banco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._banco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._banco.Entity = Nothing
					previousValue.depositos.Remove(Me)
				End If
				Me._banco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.depositos.Add(Me)
					Me._idBanco = value.idBanco
				Else
					Me._idBanco = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("banco")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.descripcionMovCaja")>  _
Partial Public Class descripcionMovCaja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idDescripcionMovCaja As Integer
	
	Private _descripcion As String
	
	Private _movimientoCajas As EntitySet(Of movimientoCaja)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidDescripcionMovCajaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidDescripcionMovCajaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._movimientoCajas = New EntitySet(Of movimientoCaja)(AddressOf Me.attach_movimientoCajas, AddressOf Me.detach_movimientoCajas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idDescripcionMovCaja", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idDescripcionMovCaja() As Integer
		Get
			Return Me._idDescripcionMovCaja
		End Get
		Set
			If ((Me._idDescripcionMovCaja = value)  _
						= false) Then
				Me.OnidDescripcionMovCajaChanging(value)
				Me.SendPropertyChanging
				Me._idDescripcionMovCaja = value
				Me.SendPropertyChanged("idDescripcionMovCaja")
				Me.OnidDescripcionMovCajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="descripcionMovCaja_movimientoCaja", Storage:="_movimientoCajas", ThisKey:="idDescripcionMovCaja", OtherKey:="idDescripcionMovCaja")>  _
	Public Property movimientoCajas() As EntitySet(Of movimientoCaja)
		Get
			Return Me._movimientoCajas
		End Get
		Set
			Me._movimientoCajas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_movimientoCajas(ByVal entity As movimientoCaja)
		Me.SendPropertyChanging
		entity.descripcionMovCaja = Me
	End Sub
	
	Private Sub detach_movimientoCajas(ByVal entity As movimientoCaja)
		Me.SendPropertyChanging
		entity.descripcionMovCaja = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.estadoPedido")>  _
Partial Public Class estadoPedido
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idEstadoPedido As Integer
	
	Private _descripcion As String
	
	Private _compraCabes As EntitySet(Of compraCabe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidEstadoPedidoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEstadoPedidoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraCabes = New EntitySet(Of compraCabe)(AddressOf Me.attach_compraCabes, AddressOf Me.detach_compraCabes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstadoPedido", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idEstadoPedido() As Integer
		Get
			Return Me._idEstadoPedido
		End Get
		Set
			If ((Me._idEstadoPedido = value)  _
						= false) Then
				Me.OnidEstadoPedidoChanging(value)
				Me.SendPropertyChanging
				Me._idEstadoPedido = value
				Me.SendPropertyChanged("idEstadoPedido")
				Me.OnidEstadoPedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="estadoPedido_compraCabe", Storage:="_compraCabes", ThisKey:="idEstadoPedido", OtherKey:="idEstado")>  _
	Public Property compraCabes() As EntitySet(Of compraCabe)
		Get
			Return Me._compraCabes
		End Get
		Set
			Me._compraCabes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.estadoPedido = Me
	End Sub
	
	Private Sub detach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.estadoPedido = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.kit")>  _
Partial Public Class kit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idKit As Integer
	
	Private _descripcion As String
	
	Private _idProductoPrincipal As Integer
	
	Private _kitProductos As EntitySet(Of kitProducto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidKitChanging(value As Integer)
    End Sub
    Partial Private Sub OnidKitChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnidProductoPrincipalChanging(value As Integer)
    End Sub
    Partial Private Sub OnidProductoPrincipalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._kitProductos = New EntitySet(Of kitProducto)(AddressOf Me.attach_kitProductos, AddressOf Me.detach_kitProductos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idKit", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idKit() As Integer
		Get
			Return Me._idKit
		End Get
		Set
			If ((Me._idKit = value)  _
						= false) Then
				Me.OnidKitChanging(value)
				Me.SendPropertyChanging
				Me._idKit = value
				Me.SendPropertyChanged("idKit")
				Me.OnidKitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProductoPrincipal", DbType:="Int NOT NULL")>  _
	Public Property idProductoPrincipal() As Integer
		Get
			Return Me._idProductoPrincipal
		End Get
		Set
			If ((Me._idProductoPrincipal = value)  _
						= false) Then
				Me.OnidProductoPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._idProductoPrincipal = value
				Me.SendPropertyChanged("idProductoPrincipal")
				Me.OnidProductoPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="kit_kitProducto", Storage:="_kitProductos", ThisKey:="idKit", OtherKey:="idKit")>  _
	Public Property kitProductos() As EntitySet(Of kitProducto)
		Get
			Return Me._kitProductos
		End Get
		Set
			Me._kitProductos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_kitProductos(ByVal entity As kitProducto)
		Me.SendPropertyChanging
		entity.kit = Me
	End Sub
	
	Private Sub detach_kitProductos(ByVal entity As kitProducto)
		Me.SendPropertyChanging
		entity.kit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.kitProducto")>  _
Partial Public Class kitProducto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idKit As Integer
	
	Private _idProducto As Integer
	
	Private _cantdad As System.Nullable(Of Integer)
	
	Private _kit As EntityRef(Of kit)
	
	Private _producto As EntityRef(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidKitChanging(value As Integer)
    End Sub
    Partial Private Sub OnidKitChanged()
    End Sub
    Partial Private Sub OnidProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidProductoChanged()
    End Sub
    Partial Private Sub OncantdadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncantdadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._kit = CType(Nothing, EntityRef(Of kit))
		Me._producto = CType(Nothing, EntityRef(Of producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idKit", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idKit() As Integer
		Get
			Return Me._idKit
		End Get
		Set
			If ((Me._idKit = value)  _
						= false) Then
				If Me._kit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidKitChanging(value)
				Me.SendPropertyChanging
				Me._idKit = value
				Me.SendPropertyChanged("idKit")
				Me.OnidKitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProducto", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idProducto() As Integer
		Get
			Return Me._idProducto
		End Get
		Set
			If ((Me._idProducto = value)  _
						= false) Then
				If Me._producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProductoChanging(value)
				Me.SendPropertyChanging
				Me._idProducto = value
				Me.SendPropertyChanged("idProducto")
				Me.OnidProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantdad", DbType:="Int")>  _
	Public Property cantdad() As System.Nullable(Of Integer)
		Get
			Return Me._cantdad
		End Get
		Set
			If (Me._cantdad.Equals(value) = false) Then
				Me.OncantdadChanging(value)
				Me.SendPropertyChanging
				Me._cantdad = value
				Me.SendPropertyChanged("cantdad")
				Me.OncantdadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="kit_kitProducto", Storage:="_kit", ThisKey:="idKit", OtherKey:="idKit", IsForeignKey:=true)>  _
	Public Property kit() As kit
		Get
			Return Me._kit.Entity
		End Get
		Set
			Dim previousValue As kit = Me._kit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._kit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._kit.Entity = Nothing
					previousValue.kitProductos.Remove(Me)
				End If
				Me._kit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.kitProductos.Add(Me)
					Me._idKit = value.idKit
				Else
					Me._idKit = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("kit")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_kitProducto", Storage:="_producto", ThisKey:="idProducto", OtherKey:="idProducto", IsForeignKey:=true)>  _
	Public Property producto() As producto
		Get
			Return Me._producto.Entity
		End Get
		Set
			Dim previousValue As producto = Me._producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._producto.Entity = Nothing
					previousValue.kitProductos.Remove(Me)
				End If
				Me._producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.kitProductos.Add(Me)
					Me._idProducto = value.idProducto
				Else
					Me._idProducto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.localidad")>  _
Partial Public Class localidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idLocalidad As Integer
	
	Private _idProvincia As System.Nullable(Of Integer)
	
	Private _descripcion As String
	
	Private _clientes As EntitySet(Of cliente)
	
	Private _proveedors As EntitySet(Of proveedor)
	
	Private _provincia As EntityRef(Of provincia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidLocalidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnidLocalidadChanged()
    End Sub
    Partial Private Sub OnidProvinciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProvinciaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._clientes = New EntitySet(Of cliente)(AddressOf Me.attach_clientes, AddressOf Me.detach_clientes)
		Me._proveedors = New EntitySet(Of proveedor)(AddressOf Me.attach_proveedors, AddressOf Me.detach_proveedors)
		Me._provincia = CType(Nothing, EntityRef(Of provincia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLocalidad", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idLocalidad() As Integer
		Get
			Return Me._idLocalidad
		End Get
		Set
			If ((Me._idLocalidad = value)  _
						= false) Then
				Me.OnidLocalidadChanging(value)
				Me.SendPropertyChanging
				Me._idLocalidad = value
				Me.SendPropertyChanged("idLocalidad")
				Me.OnidLocalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProvincia", DbType:="Int")>  _
	Public Property idProvincia() As System.Nullable(Of Integer)
		Get
			Return Me._idProvincia
		End Get
		Set
			If (Me._idProvincia.Equals(value) = false) Then
				If Me._provincia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._idProvincia = value
				Me.SendPropertyChanged("idProvincia")
				Me.OnidProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="localidad_cliente", Storage:="_clientes", ThisKey:="idLocalidad", OtherKey:="idLocalidad")>  _
	Public Property clientes() As EntitySet(Of cliente)
		Get
			Return Me._clientes
		End Get
		Set
			Me._clientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="localidad_proveedor", Storage:="_proveedors", ThisKey:="idLocalidad", OtherKey:="idLocalidad")>  _
	Public Property proveedors() As EntitySet(Of proveedor)
		Get
			Return Me._proveedors
		End Get
		Set
			Me._proveedors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_localidad", Storage:="_provincia", ThisKey:="idProvincia", OtherKey:="idProvincia", IsForeignKey:=true)>  _
	Public Property provincia() As provincia
		Get
			Return Me._provincia.Entity
		End Get
		Set
			Dim previousValue As provincia = Me._provincia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._provincia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._provincia.Entity = Nothing
					previousValue.localidads.Remove(Me)
				End If
				Me._provincia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.localidads.Add(Me)
					Me._idProvincia = value.idProvincia
				Else
					Me._idProvincia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("provincia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.localidad = Me
	End Sub
	
	Private Sub detach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.localidad = Nothing
	End Sub
	
	Private Sub attach_proveedors(ByVal entity As proveedor)
		Me.SendPropertyChanging
		entity.localidad = Me
	End Sub
	
	Private Sub detach_proveedors(ByVal entity As proveedor)
		Me.SendPropertyChanging
		entity.localidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.medioPago")>  _
Partial Public Class medioPago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMedioPago As Integer
	
	Private _descripcion As String
	
	Private _movimientoCajas As EntitySet(Of movimientoCaja)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMedioPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMedioPagoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._movimientoCajas = New EntitySet(Of movimientoCaja)(AddressOf Me.attach_movimientoCajas, AddressOf Me.detach_movimientoCajas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMedioPago", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idMedioPago() As Integer
		Get
			Return Me._idMedioPago
		End Get
		Set
			If ((Me._idMedioPago = value)  _
						= false) Then
				Me.OnidMedioPagoChanging(value)
				Me.SendPropertyChanging
				Me._idMedioPago = value
				Me.SendPropertyChanged("idMedioPago")
				Me.OnidMedioPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="medioPago_movimientoCaja", Storage:="_movimientoCajas", ThisKey:="idMedioPago", OtherKey:="idMedioPago")>  _
	Public Property movimientoCajas() As EntitySet(Of movimientoCaja)
		Get
			Return Me._movimientoCajas
		End Get
		Set
			Me._movimientoCajas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_movimientoCajas(ByVal entity As movimientoCaja)
		Me.SendPropertyChanging
		entity.medioPago = Me
	End Sub
	
	Private Sub detach_movimientoCajas(ByVal entity As movimientoCaja)
		Me.SendPropertyChanging
		entity.medioPago = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.movimientoCaja")>  _
Partial Public Class movimientoCaja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMovimientoCaja As Integer
	
	Private _idTipoMovimiento As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _idMedioPago As System.Nullable(Of Integer)
	
	Private _monto As System.Nullable(Of Double)
	
	Private _idDescripcionMovCaja As System.Nullable(Of Integer)
	
	Private _descripcionMovimiento As String
	
	Private _movimientoCajaCheques As EntitySet(Of movimientoCajaCheque)
	
	Private _descripcionMovCaja As EntityRef(Of descripcionMovCaja)
	
	Private _medioPago As EntityRef(Of medioPago)
	
	Private _tipoMovimiento As EntityRef(Of tipoMovimiento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMovimientoCajaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMovimientoCajaChanged()
    End Sub
    Partial Private Sub OnidTipoMovimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoMovimientoChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnidMedioPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidMedioPagoChanged()
    End Sub
    Partial Private Sub OnmontoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnmontoChanged()
    End Sub
    Partial Private Sub OnidDescripcionMovCajaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidDescripcionMovCajaChanged()
    End Sub
    Partial Private Sub OndescripcionMovimientoChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionMovimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._movimientoCajaCheques = New EntitySet(Of movimientoCajaCheque)(AddressOf Me.attach_movimientoCajaCheques, AddressOf Me.detach_movimientoCajaCheques)
		Me._descripcionMovCaja = CType(Nothing, EntityRef(Of descripcionMovCaja))
		Me._medioPago = CType(Nothing, EntityRef(Of medioPago))
		Me._tipoMovimiento = CType(Nothing, EntityRef(Of tipoMovimiento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMovimientoCaja", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idMovimientoCaja() As Integer
		Get
			Return Me._idMovimientoCaja
		End Get
		Set
			If ((Me._idMovimientoCaja = value)  _
						= false) Then
				Me.OnidMovimientoCajaChanging(value)
				Me.SendPropertyChanging
				Me._idMovimientoCaja = value
				Me.SendPropertyChanged("idMovimientoCaja")
				Me.OnidMovimientoCajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoMovimiento", DbType:="Int")>  _
	Public Property idTipoMovimiento() As System.Nullable(Of Integer)
		Get
			Return Me._idTipoMovimiento
		End Get
		Set
			If (Me._idTipoMovimiento.Equals(value) = false) Then
				If Me._tipoMovimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTipoMovimientoChanging(value)
				Me.SendPropertyChanging
				Me._idTipoMovimiento = value
				Me.SendPropertyChanged("idTipoMovimiento")
				Me.OnidTipoMovimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMedioPago", DbType:="Int")>  _
	Public Property idMedioPago() As System.Nullable(Of Integer)
		Get
			Return Me._idMedioPago
		End Get
		Set
			If (Me._idMedioPago.Equals(value) = false) Then
				If Me._medioPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidMedioPagoChanging(value)
				Me.SendPropertyChanging
				Me._idMedioPago = value
				Me.SendPropertyChanged("idMedioPago")
				Me.OnidMedioPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monto", DbType:="Float")>  _
	Public Property monto() As System.Nullable(Of Double)
		Get
			Return Me._monto
		End Get
		Set
			If (Me._monto.Equals(value) = false) Then
				Me.OnmontoChanging(value)
				Me.SendPropertyChanging
				Me._monto = value
				Me.SendPropertyChanged("monto")
				Me.OnmontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idDescripcionMovCaja", DbType:="Int")>  _
	Public Property idDescripcionMovCaja() As System.Nullable(Of Integer)
		Get
			Return Me._idDescripcionMovCaja
		End Get
		Set
			If (Me._idDescripcionMovCaja.Equals(value) = false) Then
				If Me._descripcionMovCaja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidDescripcionMovCajaChanging(value)
				Me.SendPropertyChanging
				Me._idDescripcionMovCaja = value
				Me.SendPropertyChanged("idDescripcionMovCaja")
				Me.OnidDescripcionMovCajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcionMovimiento", DbType:="VarChar(100)")>  _
	Public Property descripcionMovimiento() As String
		Get
			Return Me._descripcionMovimiento
		End Get
		Set
			If (String.Equals(Me._descripcionMovimiento, value) = false) Then
				Me.OndescripcionMovimientoChanging(value)
				Me.SendPropertyChanging
				Me._descripcionMovimiento = value
				Me.SendPropertyChanged("descripcionMovimiento")
				Me.OndescripcionMovimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="movimientoCaja_movimientoCajaCheque", Storage:="_movimientoCajaCheques", ThisKey:="idMovimientoCaja", OtherKey:="idMovimientoCaja")>  _
	Public Property movimientoCajaCheques() As EntitySet(Of movimientoCajaCheque)
		Get
			Return Me._movimientoCajaCheques
		End Get
		Set
			Me._movimientoCajaCheques.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="descripcionMovCaja_movimientoCaja", Storage:="_descripcionMovCaja", ThisKey:="idDescripcionMovCaja", OtherKey:="idDescripcionMovCaja", IsForeignKey:=true)>  _
	Public Property descripcionMovCaja() As descripcionMovCaja
		Get
			Return Me._descripcionMovCaja.Entity
		End Get
		Set
			Dim previousValue As descripcionMovCaja = Me._descripcionMovCaja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._descripcionMovCaja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._descripcionMovCaja.Entity = Nothing
					previousValue.movimientoCajas.Remove(Me)
				End If
				Me._descripcionMovCaja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoCajas.Add(Me)
					Me._idDescripcionMovCaja = value.idDescripcionMovCaja
				Else
					Me._idDescripcionMovCaja = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("descripcionMovCaja")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="medioPago_movimientoCaja", Storage:="_medioPago", ThisKey:="idMedioPago", OtherKey:="idMedioPago", IsForeignKey:=true)>  _
	Public Property medioPago() As medioPago
		Get
			Return Me._medioPago.Entity
		End Get
		Set
			Dim previousValue As medioPago = Me._medioPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._medioPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._medioPago.Entity = Nothing
					previousValue.movimientoCajas.Remove(Me)
				End If
				Me._medioPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoCajas.Add(Me)
					Me._idMedioPago = value.idMedioPago
				Else
					Me._idMedioPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("medioPago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoMovimiento_movimientoCaja", Storage:="_tipoMovimiento", ThisKey:="idTipoMovimiento", OtherKey:="idTipoMovimiento", IsForeignKey:=true)>  _
	Public Property tipoMovimiento() As tipoMovimiento
		Get
			Return Me._tipoMovimiento.Entity
		End Get
		Set
			Dim previousValue As tipoMovimiento = Me._tipoMovimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipoMovimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipoMovimiento.Entity = Nothing
					previousValue.movimientoCajas.Remove(Me)
				End If
				Me._tipoMovimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoCajas.Add(Me)
					Me._idTipoMovimiento = value.idTipoMovimiento
				Else
					Me._idTipoMovimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipoMovimiento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_movimientoCajaCheques(ByVal entity As movimientoCajaCheque)
		Me.SendPropertyChanging
		entity.movimientoCaja = Me
	End Sub
	
	Private Sub detach_movimientoCajaCheques(ByVal entity As movimientoCajaCheque)
		Me.SendPropertyChanging
		entity.movimientoCaja = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.movimientoCajaCheque")>  _
Partial Public Class movimientoCajaCheque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMovimientoCaja As Integer
	
	Private _idCheque As Integer
	
	Private _cheque As EntityRef(Of cheque)
	
	Private _movimientoCaja As EntityRef(Of movimientoCaja)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMovimientoCajaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMovimientoCajaChanged()
    End Sub
    Partial Private Sub OnidChequeChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChequeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cheque = CType(Nothing, EntityRef(Of cheque))
		Me._movimientoCaja = CType(Nothing, EntityRef(Of movimientoCaja))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMovimientoCaja", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idMovimientoCaja() As Integer
		Get
			Return Me._idMovimientoCaja
		End Get
		Set
			If ((Me._idMovimientoCaja = value)  _
						= false) Then
				If Me._movimientoCaja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidMovimientoCajaChanging(value)
				Me.SendPropertyChanging
				Me._idMovimientoCaja = value
				Me.SendPropertyChanged("idMovimientoCaja")
				Me.OnidMovimientoCajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCheque", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idCheque() As Integer
		Get
			Return Me._idCheque
		End Get
		Set
			If ((Me._idCheque = value)  _
						= false) Then
				If Me._cheque.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidChequeChanging(value)
				Me.SendPropertyChanging
				Me._idCheque = value
				Me.SendPropertyChanged("idCheque")
				Me.OnidChequeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cheque_movimientoCajaCheque", Storage:="_cheque", ThisKey:="idCheque", OtherKey:="idCheque", IsForeignKey:=true)>  _
	Public Property cheque() As cheque
		Get
			Return Me._cheque.Entity
		End Get
		Set
			Dim previousValue As cheque = Me._cheque.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cheque.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cheque.Entity = Nothing
					previousValue.movimientoCajaCheques.Remove(Me)
				End If
				Me._cheque.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoCajaCheques.Add(Me)
					Me._idCheque = value.idCheque
				Else
					Me._idCheque = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cheque")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="movimientoCaja_movimientoCajaCheque", Storage:="_movimientoCaja", ThisKey:="idMovimientoCaja", OtherKey:="idMovimientoCaja", IsForeignKey:=true)>  _
	Public Property movimientoCaja() As movimientoCaja
		Get
			Return Me._movimientoCaja.Entity
		End Get
		Set
			Dim previousValue As movimientoCaja = Me._movimientoCaja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._movimientoCaja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._movimientoCaja.Entity = Nothing
					previousValue.movimientoCajaCheques.Remove(Me)
				End If
				Me._movimientoCaja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoCajaCheques.Add(Me)
					Me._idMovimientoCaja = value.idMovimientoCaja
				Else
					Me._idMovimientoCaja = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("movimientoCaja")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.movimientoStock")>  _
Partial Public Class movimientoStock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMovimientoStock As Integer
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _idTipoMovimiento As System.Nullable(Of Integer)
	
	Private _idProducto As System.Nullable(Of Integer)
	
	Private _cantidad As System.Nullable(Of Double)
	
	Private _idUbicacionStock As System.Nullable(Of Integer)
	
	Private _idUbicacionStockOrigen As System.Nullable(Of Integer)
	
	Private _idUbicacionStockDestino As System.Nullable(Of Integer)
	
	Private _tipoMovimiento As EntityRef(Of tipoMovimiento)
	
	Private _ubicacionStock As EntityRef(Of ubicacionStock)
	
	Private _ubicacionStock1 As EntityRef(Of ubicacionStock)
	
	Private _ubicacionStock2 As EntityRef(Of ubicacionStock)
	
	Private _producto As EntityRef(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMovimientoStockChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMovimientoStockChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnidTipoMovimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoMovimientoChanged()
    End Sub
    Partial Private Sub OnidProductoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProductoChanged()
    End Sub
    Partial Private Sub OncantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub OnidUbicacionStockChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidUbicacionStockChanged()
    End Sub
    Partial Private Sub OnidUbicacionStockOrigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidUbicacionStockOrigenChanged()
    End Sub
    Partial Private Sub OnidUbicacionStockDestinoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidUbicacionStockDestinoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tipoMovimiento = CType(Nothing, EntityRef(Of tipoMovimiento))
		Me._ubicacionStock = CType(Nothing, EntityRef(Of ubicacionStock))
		Me._ubicacionStock1 = CType(Nothing, EntityRef(Of ubicacionStock))
		Me._ubicacionStock2 = CType(Nothing, EntityRef(Of ubicacionStock))
		Me._producto = CType(Nothing, EntityRef(Of producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMovimientoStock", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idMovimientoStock() As Integer
		Get
			Return Me._idMovimientoStock
		End Get
		Set
			If ((Me._idMovimientoStock = value)  _
						= false) Then
				Me.OnidMovimientoStockChanging(value)
				Me.SendPropertyChanging
				Me._idMovimientoStock = value
				Me.SendPropertyChanged("idMovimientoStock")
				Me.OnidMovimientoStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoMovimiento", DbType:="Int")>  _
	Public Property idTipoMovimiento() As System.Nullable(Of Integer)
		Get
			Return Me._idTipoMovimiento
		End Get
		Set
			If (Me._idTipoMovimiento.Equals(value) = false) Then
				If Me._tipoMovimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTipoMovimientoChanging(value)
				Me.SendPropertyChanging
				Me._idTipoMovimiento = value
				Me.SendPropertyChanged("idTipoMovimiento")
				Me.OnidTipoMovimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProducto", DbType:="Int")>  _
	Public Property idProducto() As System.Nullable(Of Integer)
		Get
			Return Me._idProducto
		End Get
		Set
			If (Me._idProducto.Equals(value) = false) Then
				If Me._producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProductoChanging(value)
				Me.SendPropertyChanging
				Me._idProducto = value
				Me.SendPropertyChanged("idProducto")
				Me.OnidProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="Float")>  _
	Public Property cantidad() As System.Nullable(Of Double)
		Get
			Return Me._cantidad
		End Get
		Set
			If (Me._cantidad.Equals(value) = false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUbicacionStock", DbType:="Int")>  _
	Public Property idUbicacionStock() As System.Nullable(Of Integer)
		Get
			Return Me._idUbicacionStock
		End Get
		Set
			If (Me._idUbicacionStock.Equals(value) = false) Then
				If Me._ubicacionStock.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidUbicacionStockChanging(value)
				Me.SendPropertyChanging
				Me._idUbicacionStock = value
				Me.SendPropertyChanged("idUbicacionStock")
				Me.OnidUbicacionStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUbicacionStockOrigen", DbType:="Int")>  _
	Public Property idUbicacionStockOrigen() As System.Nullable(Of Integer)
		Get
			Return Me._idUbicacionStockOrigen
		End Get
		Set
			If (Me._idUbicacionStockOrigen.Equals(value) = false) Then
				If Me._ubicacionStock2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidUbicacionStockOrigenChanging(value)
				Me.SendPropertyChanging
				Me._idUbicacionStockOrigen = value
				Me.SendPropertyChanged("idUbicacionStockOrigen")
				Me.OnidUbicacionStockOrigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUbicacionStockDestino", DbType:="Int")>  _
	Public Property idUbicacionStockDestino() As System.Nullable(Of Integer)
		Get
			Return Me._idUbicacionStockDestino
		End Get
		Set
			If (Me._idUbicacionStockDestino.Equals(value) = false) Then
				If Me._ubicacionStock1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidUbicacionStockDestinoChanging(value)
				Me.SendPropertyChanging
				Me._idUbicacionStockDestino = value
				Me.SendPropertyChanged("idUbicacionStockDestino")
				Me.OnidUbicacionStockDestinoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoMovimiento_movimientoStock", Storage:="_tipoMovimiento", ThisKey:="idTipoMovimiento", OtherKey:="idTipoMovimiento", IsForeignKey:=true)>  _
	Public Property tipoMovimiento() As tipoMovimiento
		Get
			Return Me._tipoMovimiento.Entity
		End Get
		Set
			Dim previousValue As tipoMovimiento = Me._tipoMovimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipoMovimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipoMovimiento.Entity = Nothing
					previousValue.movimientoStocks.Remove(Me)
				End If
				Me._tipoMovimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoStocks.Add(Me)
					Me._idTipoMovimiento = value.idTipoMovimiento
				Else
					Me._idTipoMovimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipoMovimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_movimientoStock", Storage:="_ubicacionStock", ThisKey:="idUbicacionStock", OtherKey:="idUbicacionStock", IsForeignKey:=true)>  _
	Public Property ubicacionStock() As ubicacionStock
		Get
			Return Me._ubicacionStock.Entity
		End Get
		Set
			Dim previousValue As ubicacionStock = Me._ubicacionStock.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacionStock.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacionStock.Entity = Nothing
					previousValue.movimientoStocks.Remove(Me)
				End If
				Me._ubicacionStock.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoStocks.Add(Me)
					Me._idUbicacionStock = value.idUbicacionStock
				Else
					Me._idUbicacionStock = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacionStock")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_movimientoStock1", Storage:="_ubicacionStock1", ThisKey:="idUbicacionStockDestino", OtherKey:="idUbicacionStock", IsForeignKey:=true)>  _
	Public Property ubicacionStock1() As ubicacionStock
		Get
			Return Me._ubicacionStock1.Entity
		End Get
		Set
			Dim previousValue As ubicacionStock = Me._ubicacionStock1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacionStock1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacionStock1.Entity = Nothing
					previousValue.movimientoStocks1.Remove(Me)
				End If
				Me._ubicacionStock1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoStocks1.Add(Me)
					Me._idUbicacionStockDestino = value.idUbicacionStock
				Else
					Me._idUbicacionStockDestino = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacionStock1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_movimientoStock2", Storage:="_ubicacionStock2", ThisKey:="idUbicacionStockOrigen", OtherKey:="idUbicacionStock", IsForeignKey:=true)>  _
	Public Property ubicacionStock2() As ubicacionStock
		Get
			Return Me._ubicacionStock2.Entity
		End Get
		Set
			Dim previousValue As ubicacionStock = Me._ubicacionStock2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacionStock2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacionStock2.Entity = Nothing
					previousValue.movimientoStocks2.Remove(Me)
				End If
				Me._ubicacionStock2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoStocks2.Add(Me)
					Me._idUbicacionStockOrigen = value.idUbicacionStock
				Else
					Me._idUbicacionStockOrigen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacionStock2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_movimientoStock", Storage:="_producto", ThisKey:="idProducto", OtherKey:="idProducto", IsForeignKey:=true)>  _
	Public Property producto() As producto
		Get
			Return Me._producto.Entity
		End Get
		Set
			Dim previousValue As producto = Me._producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._producto.Entity = Nothing
					previousValue.movimientoStocks.Remove(Me)
				End If
				Me._producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.movimientoStocks.Add(Me)
					Me._idProducto = value.idProducto
				Else
					Me._idProducto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.origenCheque")>  _
Partial Public Class origenCheque
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idOrigenCheque As Integer
	
	Private _descripcion As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidOrigenChequeChanging(value As Integer)
    End Sub
    Partial Private Sub OnidOrigenChequeChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idOrigenCheque", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idOrigenCheque() As Integer
		Get
			Return Me._idOrigenCheque
		End Get
		Set
			If ((Me._idOrigenCheque = value)  _
						= false) Then
				Me.OnidOrigenChequeChanging(value)
				Me.SendPropertyChanging
				Me._idOrigenCheque = value
				Me.SendPropertyChanged("idOrigenCheque")
				Me.OnidOrigenChequeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pantalla")>  _
Partial Public Class pantalla
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idPantalla As Integer
	
	Private _url As String
	
	Private _descripcion As String
	
	Private _tipo As String
	
	Private _usuarioPantallas As EntitySet(Of usuarioPantalla)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidPantallaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidPantallaChanged()
    End Sub
    Partial Private Sub OnurlChanging(value As String)
    End Sub
    Partial Private Sub OnurlChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OntipoChanging(value As String)
    End Sub
    Partial Private Sub OntipoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usuarioPantallas = New EntitySet(Of usuarioPantalla)(AddressOf Me.attach_usuarioPantallas, AddressOf Me.detach_usuarioPantallas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPantalla", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idPantalla() As Integer
		Get
			Return Me._idPantalla
		End Get
		Set
			If ((Me._idPantalla = value)  _
						= false) Then
				Me.OnidPantallaChanging(value)
				Me.SendPropertyChanging
				Me._idPantalla = value
				Me.SendPropertyChanged("idPantalla")
				Me.OnidPantallaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_url", DbType:="VarChar(50)")>  _
	Public Property url() As String
		Get
			Return Me._url
		End Get
		Set
			If (String.Equals(Me._url, value) = false) Then
				Me.OnurlChanging(value)
				Me.SendPropertyChanging
				Me._url = value
				Me.SendPropertyChanged("url")
				Me.OnurlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo", DbType:="VarChar(50)")>  _
	Public Property tipo() As String
		Get
			Return Me._tipo
		End Get
		Set
			If (String.Equals(Me._tipo, value) = false) Then
				Me.OntipoChanging(value)
				Me.SendPropertyChanging
				Me._tipo = value
				Me.SendPropertyChanged("tipo")
				Me.OntipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="pantalla_usuarioPantalla", Storage:="_usuarioPantallas", ThisKey:="idPantalla", OtherKey:="idPantalla")>  _
	Public Property usuarioPantallas() As EntitySet(Of usuarioPantalla)
		Get
			Return Me._usuarioPantallas
		End Get
		Set
			Me._usuarioPantallas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_usuarioPantallas(ByVal entity As usuarioPantalla)
		Me.SendPropertyChanging
		entity.pantalla = Me
	End Sub
	
	Private Sub detach_usuarioPantallas(ByVal entity As usuarioPantalla)
		Me.SendPropertyChanging
		entity.pantalla = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.provincia")>  _
Partial Public Class provincia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idProvincia As Integer
	
	Private _descripcion As String
	
	Private _localidads As EntitySet(Of localidad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidProvinciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidProvinciaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._localidads = New EntitySet(Of localidad)(AddressOf Me.attach_localidads, AddressOf Me.detach_localidads)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProvincia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idProvincia() As Integer
		Get
			Return Me._idProvincia
		End Get
		Set
			If ((Me._idProvincia = value)  _
						= false) Then
				Me.OnidProvinciaChanging(value)
				Me.SendPropertyChanging
				Me._idProvincia = value
				Me.SendPropertyChanged("idProvincia")
				Me.OnidProvinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_localidad", Storage:="_localidads", ThisKey:="idProvincia", OtherKey:="idProvincia")>  _
	Public Property localidads() As EntitySet(Of localidad)
		Get
			Return Me._localidads
		End Get
		Set
			Me._localidads.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_localidads(ByVal entity As localidad)
		Me.SendPropertyChanging
		entity.provincia = Me
	End Sub
	
	Private Sub detach_localidads(ByVal entity As localidad)
		Me.SendPropertyChanging
		entity.provincia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.remito")>  _
Partial Public Class remito
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idRemito As Integer
	
	Private _idPedido As System.Nullable(Of Integer)
	
	Private _idFactura As System.Nullable(Of Integer)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidRemitoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidRemitoChanged()
    End Sub
    Partial Private Sub OnidPedidoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidPedidoChanged()
    End Sub
    Partial Private Sub OnidFacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFacturaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idRemito", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idRemito() As Integer
		Get
			Return Me._idRemito
		End Get
		Set
			If ((Me._idRemito = value)  _
						= false) Then
				Me.OnidRemitoChanging(value)
				Me.SendPropertyChanging
				Me._idRemito = value
				Me.SendPropertyChanged("idRemito")
				Me.OnidRemitoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPedido", DbType:="Int")>  _
	Public Property idPedido() As System.Nullable(Of Integer)
		Get
			Return Me._idPedido
		End Get
		Set
			If (Me._idPedido.Equals(value) = false) Then
				Me.OnidPedidoChanging(value)
				Me.SendPropertyChanging
				Me._idPedido = value
				Me.SendPropertyChanged("idPedido")
				Me.OnidPedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFactura", DbType:="Int")>  _
	Public Property idFactura() As System.Nullable(Of Integer)
		Get
			Return Me._idFactura
		End Get
		Set
			If (Me._idFactura.Equals(value) = false) Then
				Me.OnidFacturaChanging(value)
				Me.SendPropertyChanging
				Me._idFactura = value
				Me.SendPropertyChanged("idFactura")
				Me.OnidFacturaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipoMovimiento")>  _
Partial Public Class tipoMovimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idTipoMovimiento As Integer
	
	Private _descripcion As String
	
	Private _movimientoCajas As EntitySet(Of movimientoCaja)
	
	Private _movimientoStocks As EntitySet(Of movimientoStock)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTipoMovimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTipoMovimientoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._movimientoCajas = New EntitySet(Of movimientoCaja)(AddressOf Me.attach_movimientoCajas, AddressOf Me.detach_movimientoCajas)
		Me._movimientoStocks = New EntitySet(Of movimientoStock)(AddressOf Me.attach_movimientoStocks, AddressOf Me.detach_movimientoStocks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoMovimiento", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idTipoMovimiento() As Integer
		Get
			Return Me._idTipoMovimiento
		End Get
		Set
			If ((Me._idTipoMovimiento = value)  _
						= false) Then
				Me.OnidTipoMovimientoChanging(value)
				Me.SendPropertyChanging
				Me._idTipoMovimiento = value
				Me.SendPropertyChanged("idTipoMovimiento")
				Me.OnidTipoMovimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoMovimiento_movimientoCaja", Storage:="_movimientoCajas", ThisKey:="idTipoMovimiento", OtherKey:="idTipoMovimiento")>  _
	Public Property movimientoCajas() As EntitySet(Of movimientoCaja)
		Get
			Return Me._movimientoCajas
		End Get
		Set
			Me._movimientoCajas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoMovimiento_movimientoStock", Storage:="_movimientoStocks", ThisKey:="idTipoMovimiento", OtherKey:="idTipoMovimiento")>  _
	Public Property movimientoStocks() As EntitySet(Of movimientoStock)
		Get
			Return Me._movimientoStocks
		End Get
		Set
			Me._movimientoStocks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_movimientoCajas(ByVal entity As movimientoCaja)
		Me.SendPropertyChanging
		entity.tipoMovimiento = Me
	End Sub
	
	Private Sub detach_movimientoCajas(ByVal entity As movimientoCaja)
		Me.SendPropertyChanging
		entity.tipoMovimiento = Nothing
	End Sub
	
	Private Sub attach_movimientoStocks(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.tipoMovimiento = Me
	End Sub
	
	Private Sub detach_movimientoStocks(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.tipoMovimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipoOrden")>  _
Partial Public Class tipoOrden
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idTipoOrden As Integer
	
	Private _descripcion As String
	
	Private _compraCabes As EntitySet(Of compraCabe)
	
	Private _comprobanteCabes As EntitySet(Of comprobanteCabe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTipoOrdenChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTipoOrdenChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraCabes = New EntitySet(Of compraCabe)(AddressOf Me.attach_compraCabes, AddressOf Me.detach_compraCabes)
		Me._comprobanteCabes = New EntitySet(Of comprobanteCabe)(AddressOf Me.attach_comprobanteCabes, AddressOf Me.detach_comprobanteCabes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoOrden", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idTipoOrden() As Integer
		Get
			Return Me._idTipoOrden
		End Get
		Set
			If ((Me._idTipoOrden = value)  _
						= false) Then
				Me.OnidTipoOrdenChanging(value)
				Me.SendPropertyChanging
				Me._idTipoOrden = value
				Me.SendPropertyChanged("idTipoOrden")
				Me.OnidTipoOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoOrden_compraCabe", Storage:="_compraCabes", ThisKey:="idTipoOrden", OtherKey:="idTipoOrden")>  _
	Public Property compraCabes() As EntitySet(Of compraCabe)
		Get
			Return Me._compraCabes
		End Get
		Set
			Me._compraCabes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoOrden_comprobanteCabe", Storage:="_comprobanteCabes", ThisKey:="idTipoOrden", OtherKey:="idTipoOrden")>  _
	Public Property comprobanteCabes() As EntitySet(Of comprobanteCabe)
		Get
			Return Me._comprobanteCabes
		End Get
		Set
			Me._comprobanteCabes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.tipoOrden = Me
	End Sub
	
	Private Sub detach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.tipoOrden = Nothing
	End Sub
	
	Private Sub attach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.tipoOrden = Me
	End Sub
	
	Private Sub detach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.tipoOrden = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ubicacionStock")>  _
Partial Public Class ubicacionStock
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idUbicacionStock As Integer
	
	Private _descripcion As String
	
	Private _compraCabes As EntitySet(Of compraCabe)
	
	Private _movimientoStocks As EntitySet(Of movimientoStock)
	
	Private _movimientoStocks1 As EntitySet(Of movimientoStock)
	
	Private _movimientoStocks2 As EntitySet(Of movimientoStock)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidUbicacionStockChanging(value As Integer)
    End Sub
    Partial Private Sub OnidUbicacionStockChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraCabes = New EntitySet(Of compraCabe)(AddressOf Me.attach_compraCabes, AddressOf Me.detach_compraCabes)
		Me._movimientoStocks = New EntitySet(Of movimientoStock)(AddressOf Me.attach_movimientoStocks, AddressOf Me.detach_movimientoStocks)
		Me._movimientoStocks1 = New EntitySet(Of movimientoStock)(AddressOf Me.attach_movimientoStocks1, AddressOf Me.detach_movimientoStocks1)
		Me._movimientoStocks2 = New EntitySet(Of movimientoStock)(AddressOf Me.attach_movimientoStocks2, AddressOf Me.detach_movimientoStocks2)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUbicacionStock", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idUbicacionStock() As Integer
		Get
			Return Me._idUbicacionStock
		End Get
		Set
			If ((Me._idUbicacionStock = value)  _
						= false) Then
				Me.OnidUbicacionStockChanging(value)
				Me.SendPropertyChanging
				Me._idUbicacionStock = value
				Me.SendPropertyChanged("idUbicacionStock")
				Me.OnidUbicacionStockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_compraCabe", Storage:="_compraCabes", ThisKey:="idUbicacionStock", OtherKey:="idUbicacionStock")>  _
	Public Property compraCabes() As EntitySet(Of compraCabe)
		Get
			Return Me._compraCabes
		End Get
		Set
			Me._compraCabes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_movimientoStock", Storage:="_movimientoStocks", ThisKey:="idUbicacionStock", OtherKey:="idUbicacionStock")>  _
	Public Property movimientoStocks() As EntitySet(Of movimientoStock)
		Get
			Return Me._movimientoStocks
		End Get
		Set
			Me._movimientoStocks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_movimientoStock1", Storage:="_movimientoStocks1", ThisKey:="idUbicacionStock", OtherKey:="idUbicacionStockDestino")>  _
	Public Property movimientoStocks1() As EntitySet(Of movimientoStock)
		Get
			Return Me._movimientoStocks1
		End Get
		Set
			Me._movimientoStocks1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacionStock_movimientoStock2", Storage:="_movimientoStocks2", ThisKey:="idUbicacionStock", OtherKey:="idUbicacionStockOrigen")>  _
	Public Property movimientoStocks2() As EntitySet(Of movimientoStock)
		Get
			Return Me._movimientoStocks2
		End Get
		Set
			Me._movimientoStocks2.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.ubicacionStock = Me
	End Sub
	
	Private Sub detach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.ubicacionStock = Nothing
	End Sub
	
	Private Sub attach_movimientoStocks(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.ubicacionStock = Me
	End Sub
	
	Private Sub detach_movimientoStocks(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.ubicacionStock = Nothing
	End Sub
	
	Private Sub attach_movimientoStocks1(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.ubicacionStock1 = Me
	End Sub
	
	Private Sub detach_movimientoStocks1(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.ubicacionStock1 = Nothing
	End Sub
	
	Private Sub attach_movimientoStocks2(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.ubicacionStock2 = Me
	End Sub
	
	Private Sub detach_movimientoStocks2(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.ubicacionStock2 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usuario")>  _
Partial Public Class usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idUsuario As Integer
	
	Private _nombreUsuario As String
	
	Private _clave As String
	
	Private _nombre As String
	
	Private _email As String
	
	Private _usuarioPantallas As EntitySet(Of usuarioPantalla)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnidUsuarioChanged()
    End Sub
    Partial Private Sub OnnombreUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnnombreUsuarioChanged()
    End Sub
    Partial Private Sub OnclaveChanging(value As String)
    End Sub
    Partial Private Sub OnclaveChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usuarioPantallas = New EntitySet(Of usuarioPantalla)(AddressOf Me.attach_usuarioPantallas, AddressOf Me.detach_usuarioPantallas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUsuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idUsuario() As Integer
		Get
			Return Me._idUsuario
		End Get
		Set
			If ((Me._idUsuario = value)  _
						= false) Then
				Me.OnidUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._idUsuario = value
				Me.SendPropertyChanged("idUsuario")
				Me.OnidUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreUsuario", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property nombreUsuario() As String
		Get
			Return Me._nombreUsuario
		End Get
		Set
			If (String.Equals(Me._nombreUsuario, value) = false) Then
				Me.OnnombreUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombreUsuario = value
				Me.SendPropertyChanged("nombreUsuario")
				Me.OnnombreUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property clave() As String
		Get
			Return Me._clave
		End Get
		Set
			If (String.Equals(Me._clave, value) = false) Then
				Me.OnclaveChanging(value)
				Me.SendPropertyChanging
				Me._clave = value
				Me.SendPropertyChanged("clave")
				Me.OnclaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usuario_usuarioPantalla", Storage:="_usuarioPantallas", ThisKey:="idUsuario", OtherKey:="idUsuario")>  _
	Public Property usuarioPantallas() As EntitySet(Of usuarioPantalla)
		Get
			Return Me._usuarioPantallas
		End Get
		Set
			Me._usuarioPantallas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_usuarioPantallas(ByVal entity As usuarioPantalla)
		Me.SendPropertyChanging
		entity.usuario = Me
	End Sub
	
	Private Sub detach_usuarioPantallas(ByVal entity As usuarioPantalla)
		Me.SendPropertyChanging
		entity.usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usuarioPantalla")>  _
Partial Public Class usuarioPantalla
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idUsuario As Integer
	
	Private _idPantalla As Integer
	
	Private _esPantallaPrincipal As System.Nullable(Of Integer)
	
	Private _pantalla As EntityRef(Of pantalla)
	
	Private _usuario As EntityRef(Of usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnidUsuarioChanged()
    End Sub
    Partial Private Sub OnidPantallaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidPantallaChanged()
    End Sub
    Partial Private Sub OnesPantallaPrincipalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnesPantallaPrincipalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._pantalla = CType(Nothing, EntityRef(Of pantalla))
		Me._usuario = CType(Nothing, EntityRef(Of usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUsuario", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idUsuario() As Integer
		Get
			Return Me._idUsuario
		End Get
		Set
			If ((Me._idUsuario = value)  _
						= false) Then
				If Me._usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._idUsuario = value
				Me.SendPropertyChanged("idUsuario")
				Me.OnidUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idPantalla", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idPantalla() As Integer
		Get
			Return Me._idPantalla
		End Get
		Set
			If ((Me._idPantalla = value)  _
						= false) Then
				If Me._pantalla.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidPantallaChanging(value)
				Me.SendPropertyChanging
				Me._idPantalla = value
				Me.SendPropertyChanged("idPantalla")
				Me.OnidPantallaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_esPantallaPrincipal", DbType:="Int")>  _
	Public Property esPantallaPrincipal() As System.Nullable(Of Integer)
		Get
			Return Me._esPantallaPrincipal
		End Get
		Set
			If (Me._esPantallaPrincipal.Equals(value) = false) Then
				Me.OnesPantallaPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._esPantallaPrincipal = value
				Me.SendPropertyChanged("esPantallaPrincipal")
				Me.OnesPantallaPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="pantalla_usuarioPantalla", Storage:="_pantalla", ThisKey:="idPantalla", OtherKey:="idPantalla", IsForeignKey:=true)>  _
	Public Property pantalla() As pantalla
		Get
			Return Me._pantalla.Entity
		End Get
		Set
			Dim previousValue As pantalla = Me._pantalla.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._pantalla.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._pantalla.Entity = Nothing
					previousValue.usuarioPantallas.Remove(Me)
				End If
				Me._pantalla.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuarioPantallas.Add(Me)
					Me._idPantalla = value.idPantalla
				Else
					Me._idPantalla = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("pantalla")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usuario_usuarioPantalla", Storage:="_usuario", ThisKey:="idUsuario", OtherKey:="idUsuario", IsForeignKey:=true)>  _
	Public Property usuario() As usuario
		Get
			Return Me._usuario.Entity
		End Get
		Set
			Dim previousValue As usuario = Me._usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._usuario.Entity = Nothing
					previousValue.usuarioPantallas.Remove(Me)
				End If
				Me._usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuarioPantallas.Add(Me)
					Me._idUsuario = value.idUsuario
				Else
					Me._idUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vendedor")>  _
Partial Public Class vendedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idVendedor As Integer
	
	Private _descripcion As String
	
	Private _comprobanteCabes As EntitySet(Of comprobanteCabe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidVendedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnidVendedorChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._comprobanteCabes = New EntitySet(Of comprobanteCabe)(AddressOf Me.attach_comprobanteCabes, AddressOf Me.detach_comprobanteCabes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idVendedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idVendedor() As Integer
		Get
			Return Me._idVendedor
		End Get
		Set
			If ((Me._idVendedor = value)  _
						= false) Then
				Me.OnidVendedorChanging(value)
				Me.SendPropertyChanging
				Me._idVendedor = value
				Me.SendPropertyChanged("idVendedor")
				Me.OnidVendedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="vendedor_comprobanteCabe", Storage:="_comprobanteCabes", ThisKey:="idVendedor", OtherKey:="idVendedor")>  _
	Public Property comprobanteCabes() As EntitySet(Of comprobanteCabe)
		Get
			Return Me._comprobanteCabes
		End Get
		Set
			Me._comprobanteCabes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.vendedor = Me
	End Sub
	
	Private Sub detach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.vendedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.formaDeContacto")>  _
Partial Public Class formaDeContacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idFormaDeContacto As Integer
	
	Private _descripcion As String
	
	Private _clientes As EntitySet(Of cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidFormaDeContactoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidFormaDeContactoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._clientes = New EntitySet(Of cliente)(AddressOf Me.attach_clientes, AddressOf Me.detach_clientes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFormaDeContacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idFormaDeContacto() As Integer
		Get
			Return Me._idFormaDeContacto
		End Get
		Set
			If ((Me._idFormaDeContacto = value)  _
						= false) Then
				Me.OnidFormaDeContactoChanging(value)
				Me.SendPropertyChanging
				Me._idFormaDeContacto = value
				Me.SendPropertyChanged("idFormaDeContacto")
				Me.OnidFormaDeContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formaDeContacto_cliente", Storage:="_clientes", ThisKey:="idFormaDeContacto", OtherKey:="idFormaDeContacto")>  _
	Public Property clientes() As EntitySet(Of cliente)
		Get
			Return Me._clientes
		End Get
		Set
			Me._clientes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.formaDeContacto = Me
	End Sub
	
	Private Sub detach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.formaDeContacto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.listaDePrecios")>  _
Partial Public Class listaDePrecio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idListaDePrecios As Integer
	
	Private _descripcion As String
	
	Private _activa As System.Nullable(Of Integer)
	
	Private _clientes As EntitySet(Of cliente)
	
	Private _listaDePreciosItems As EntitySet(Of listaDePreciosItem)
	
	Private _comprobanteCabes As EntitySet(Of comprobanteCabe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidListaDePreciosChanging(value As Integer)
    End Sub
    Partial Private Sub OnidListaDePreciosChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnactivaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnactivaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._clientes = New EntitySet(Of cliente)(AddressOf Me.attach_clientes, AddressOf Me.detach_clientes)
		Me._listaDePreciosItems = New EntitySet(Of listaDePreciosItem)(AddressOf Me.attach_listaDePreciosItems, AddressOf Me.detach_listaDePreciosItems)
		Me._comprobanteCabes = New EntitySet(Of comprobanteCabe)(AddressOf Me.attach_comprobanteCabes, AddressOf Me.detach_comprobanteCabes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idListaDePrecios", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idListaDePrecios() As Integer
		Get
			Return Me._idListaDePrecios
		End Get
		Set
			If ((Me._idListaDePrecios = value)  _
						= false) Then
				Me.OnidListaDePreciosChanging(value)
				Me.SendPropertyChanging
				Me._idListaDePrecios = value
				Me.SendPropertyChanged("idListaDePrecios")
				Me.OnidListaDePreciosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activa", DbType:="Int")>  _
	Public Property activa() As System.Nullable(Of Integer)
		Get
			Return Me._activa
		End Get
		Set
			If (Me._activa.Equals(value) = false) Then
				Me.OnactivaChanging(value)
				Me.SendPropertyChanging
				Me._activa = value
				Me.SendPropertyChanged("activa")
				Me.OnactivaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDePrecio_cliente", Storage:="_clientes", ThisKey:="idListaDePrecios", OtherKey:="idListaDePrecios")>  _
	Public Property clientes() As EntitySet(Of cliente)
		Get
			Return Me._clientes
		End Get
		Set
			Me._clientes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDePrecio_listaDePreciosItem", Storage:="_listaDePreciosItems", ThisKey:="idListaDePrecios", OtherKey:="idListaDePrecios")>  _
	Public Property listaDePreciosItems() As EntitySet(Of listaDePreciosItem)
		Get
			Return Me._listaDePreciosItems
		End Get
		Set
			Me._listaDePreciosItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDePrecio_comprobanteCabe", Storage:="_comprobanteCabes", ThisKey:="idListaDePrecios", OtherKey:="idListaPrecio")>  _
	Public Property comprobanteCabes() As EntitySet(Of comprobanteCabe)
		Get
			Return Me._comprobanteCabes
		End Get
		Set
			Me._comprobanteCabes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.listaDePrecio = Me
	End Sub
	
	Private Sub detach_clientes(ByVal entity As cliente)
		Me.SendPropertyChanging
		entity.listaDePrecio = Nothing
	End Sub
	
	Private Sub attach_listaDePreciosItems(ByVal entity As listaDePreciosItem)
		Me.SendPropertyChanging
		entity.listaDePrecio = Me
	End Sub
	
	Private Sub detach_listaDePreciosItems(ByVal entity As listaDePreciosItem)
		Me.SendPropertyChanging
		entity.listaDePrecio = Nothing
	End Sub
	
	Private Sub attach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.listaDePrecio = Me
	End Sub
	
	Private Sub detach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.listaDePrecio = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cliente")>  _
Partial Public Class cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCliente As Integer
	
	Private _cuit As System.Nullable(Of Long)
	
	Private _razonSocial As String
	
	Private _idLocalidad As System.Nullable(Of Integer)
	
	Private _domicilio As String
	
	Private _codigoPostal As String
	
	Private _idCondicionIva As System.Nullable(Of Integer)
	
	Private _telefono As String
	
	Private _email As String
	
	Private _observaciones As String
	
	Private _idListaDePrecios As System.Nullable(Of Integer)
	
	Private _idFormaDeContacto As System.Nullable(Of Integer)
	
	Private _cuentaCorriente As System.Nullable(Of Integer)
	
	Private _comprobanteCabes As EntitySet(Of comprobanteCabe)
	
	Private _formaDeContacto As EntityRef(Of formaDeContacto)
	
	Private _condicionIva As EntityRef(Of condicionIva)
	
	Private _listaDePrecio As EntityRef(Of listaDePrecio)
	
	Private _localidad As EntityRef(Of localidad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnidClienteChanged()
    End Sub
    Partial Private Sub OncuitChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OncuitChanged()
    End Sub
    Partial Private Sub OnrazonSocialChanging(value As String)
    End Sub
    Partial Private Sub OnrazonSocialChanged()
    End Sub
    Partial Private Sub OnidLocalidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidLocalidadChanged()
    End Sub
    Partial Private Sub OndomicilioChanging(value As String)
    End Sub
    Partial Private Sub OndomicilioChanged()
    End Sub
    Partial Private Sub OncodigoPostalChanging(value As String)
    End Sub
    Partial Private Sub OncodigoPostalChanged()
    End Sub
    Partial Private Sub OnidCondicionIvaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidCondicionIvaChanged()
    End Sub
    Partial Private Sub OntelefonoChanging(value As String)
    End Sub
    Partial Private Sub OntelefonoChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnobservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionesChanged()
    End Sub
    Partial Private Sub OnidListaDePreciosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidListaDePreciosChanged()
    End Sub
    Partial Private Sub OnidFormaDeContactoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFormaDeContactoChanged()
    End Sub
    Partial Private Sub OncuentaCorrienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncuentaCorrienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._comprobanteCabes = New EntitySet(Of comprobanteCabe)(AddressOf Me.attach_comprobanteCabes, AddressOf Me.detach_comprobanteCabes)
		Me._formaDeContacto = CType(Nothing, EntityRef(Of formaDeContacto))
		Me._condicionIva = CType(Nothing, EntityRef(Of condicionIva))
		Me._listaDePrecio = CType(Nothing, EntityRef(Of listaDePrecio))
		Me._localidad = CType(Nothing, EntityRef(Of localidad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCliente() As Integer
		Get
			Return Me._idCliente
		End Get
		Set
			If ((Me._idCliente = value)  _
						= false) Then
				Me.OnidClienteChanging(value)
				Me.SendPropertyChanging
				Me._idCliente = value
				Me.SendPropertyChanged("idCliente")
				Me.OnidClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuit", DbType:="BigInt")>  _
	Public Property cuit() As System.Nullable(Of Long)
		Get
			Return Me._cuit
		End Get
		Set
			If (Me._cuit.Equals(value) = false) Then
				Me.OncuitChanging(value)
				Me.SendPropertyChanging
				Me._cuit = value
				Me.SendPropertyChanged("cuit")
				Me.OncuitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_razonSocial", DbType:="VarChar(100)")>  _
	Public Property razonSocial() As String
		Get
			Return Me._razonSocial
		End Get
		Set
			If (String.Equals(Me._razonSocial, value) = false) Then
				Me.OnrazonSocialChanging(value)
				Me.SendPropertyChanging
				Me._razonSocial = value
				Me.SendPropertyChanged("razonSocial")
				Me.OnrazonSocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLocalidad", DbType:="Int")>  _
	Public Property idLocalidad() As System.Nullable(Of Integer)
		Get
			Return Me._idLocalidad
		End Get
		Set
			If (Me._idLocalidad.Equals(value) = false) Then
				If Me._localidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidLocalidadChanging(value)
				Me.SendPropertyChanging
				Me._idLocalidad = value
				Me.SendPropertyChanged("idLocalidad")
				Me.OnidLocalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_domicilio", DbType:="VarChar(100)")>  _
	Public Property domicilio() As String
		Get
			Return Me._domicilio
		End Get
		Set
			If (String.Equals(Me._domicilio, value) = false) Then
				Me.OndomicilioChanging(value)
				Me.SendPropertyChanging
				Me._domicilio = value
				Me.SendPropertyChanged("domicilio")
				Me.OndomicilioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigoPostal", DbType:="Char(10)")>  _
	Public Property codigoPostal() As String
		Get
			Return Me._codigoPostal
		End Get
		Set
			If (String.Equals(Me._codigoPostal, value) = false) Then
				Me.OncodigoPostalChanging(value)
				Me.SendPropertyChanging
				Me._codigoPostal = value
				Me.SendPropertyChanged("codigoPostal")
				Me.OncodigoPostalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCondicionIva", DbType:="Int")>  _
	Public Property idCondicionIva() As System.Nullable(Of Integer)
		Get
			Return Me._idCondicionIva
		End Get
		Set
			If (Me._idCondicionIva.Equals(value) = false) Then
				If Me._condicionIva.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidCondicionIvaChanging(value)
				Me.SendPropertyChanging
				Me._idCondicionIva = value
				Me.SendPropertyChanged("idCondicionIva")
				Me.OnidCondicionIvaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono", DbType:="VarChar(20)")>  _
	Public Property telefono() As String
		Get
			Return Me._telefono
		End Get
		Set
			If (String.Equals(Me._telefono, value) = false) Then
				Me.OntelefonoChanging(value)
				Me.SendPropertyChanging
				Me._telefono = value
				Me.SendPropertyChanged("telefono")
				Me.OntelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(100)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observaciones", DbType:="VarChar(250)")>  _
	Public Property observaciones() As String
		Get
			Return Me._observaciones
		End Get
		Set
			If (String.Equals(Me._observaciones, value) = false) Then
				Me.OnobservacionesChanging(value)
				Me.SendPropertyChanging
				Me._observaciones = value
				Me.SendPropertyChanged("observaciones")
				Me.OnobservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idListaDePrecios", DbType:="Int")>  _
	Public Property idListaDePrecios() As System.Nullable(Of Integer)
		Get
			Return Me._idListaDePrecios
		End Get
		Set
			If (Me._idListaDePrecios.Equals(value) = false) Then
				If Me._listaDePrecio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidListaDePreciosChanging(value)
				Me.SendPropertyChanging
				Me._idListaDePrecios = value
				Me.SendPropertyChanged("idListaDePrecios")
				Me.OnidListaDePreciosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFormaDeContacto", DbType:="Int")>  _
	Public Property idFormaDeContacto() As System.Nullable(Of Integer)
		Get
			Return Me._idFormaDeContacto
		End Get
		Set
			If (Me._idFormaDeContacto.Equals(value) = false) Then
				If Me._formaDeContacto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidFormaDeContactoChanging(value)
				Me.SendPropertyChanging
				Me._idFormaDeContacto = value
				Me.SendPropertyChanged("idFormaDeContacto")
				Me.OnidFormaDeContactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuentaCorriente", DbType:="Int")>  _
	Public Property cuentaCorriente() As System.Nullable(Of Integer)
		Get
			Return Me._cuentaCorriente
		End Get
		Set
			If (Me._cuentaCorriente.Equals(value) = false) Then
				Me.OncuentaCorrienteChanging(value)
				Me.SendPropertyChanging
				Me._cuentaCorriente = value
				Me.SendPropertyChanged("cuentaCorriente")
				Me.OncuentaCorrienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cliente_comprobanteCabe", Storage:="_comprobanteCabes", ThisKey:="idCliente", OtherKey:="idCliente")>  _
	Public Property comprobanteCabes() As EntitySet(Of comprobanteCabe)
		Get
			Return Me._comprobanteCabes
		End Get
		Set
			Me._comprobanteCabes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formaDeContacto_cliente", Storage:="_formaDeContacto", ThisKey:="idFormaDeContacto", OtherKey:="idFormaDeContacto", IsForeignKey:=true)>  _
	Public Property formaDeContacto() As formaDeContacto
		Get
			Return Me._formaDeContacto.Entity
		End Get
		Set
			Dim previousValue As formaDeContacto = Me._formaDeContacto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._formaDeContacto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._formaDeContacto.Entity = Nothing
					previousValue.clientes.Remove(Me)
				End If
				Me._formaDeContacto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.clientes.Add(Me)
					Me._idFormaDeContacto = value.idFormaDeContacto
				Else
					Me._idFormaDeContacto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("formaDeContacto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="condicionIva_cliente", Storage:="_condicionIva", ThisKey:="idCondicionIva", OtherKey:="idCondicionIva", IsForeignKey:=true)>  _
	Public Property condicionIva() As condicionIva
		Get
			Return Me._condicionIva.Entity
		End Get
		Set
			Dim previousValue As condicionIva = Me._condicionIva.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._condicionIva.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._condicionIva.Entity = Nothing
					previousValue.clientes.Remove(Me)
				End If
				Me._condicionIva.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.clientes.Add(Me)
					Me._idCondicionIva = value.idCondicionIva
				Else
					Me._idCondicionIva = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("condicionIva")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDePrecio_cliente", Storage:="_listaDePrecio", ThisKey:="idListaDePrecios", OtherKey:="idListaDePrecios", IsForeignKey:=true)>  _
	Public Property listaDePrecio() As listaDePrecio
		Get
			Return Me._listaDePrecio.Entity
		End Get
		Set
			Dim previousValue As listaDePrecio = Me._listaDePrecio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._listaDePrecio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._listaDePrecio.Entity = Nothing
					previousValue.clientes.Remove(Me)
				End If
				Me._listaDePrecio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.clientes.Add(Me)
					Me._idListaDePrecios = value.idListaDePrecios
				Else
					Me._idListaDePrecios = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("listaDePrecio")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="localidad_cliente", Storage:="_localidad", ThisKey:="idLocalidad", OtherKey:="idLocalidad", IsForeignKey:=true)>  _
	Public Property localidad() As localidad
		Get
			Return Me._localidad.Entity
		End Get
		Set
			Dim previousValue As localidad = Me._localidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._localidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._localidad.Entity = Nothing
					previousValue.clientes.Remove(Me)
				End If
				Me._localidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.clientes.Add(Me)
					Me._idLocalidad = value.idLocalidad
				Else
					Me._idLocalidad = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("localidad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.cliente = Me
	End Sub
	
	Private Sub detach_comprobanteCabes(ByVal entity As comprobanteCabe)
		Me.SendPropertyChanging
		entity.cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.empresa")>  _
Partial Public Class empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idEmpresa As Integer
	
	Private _descripcion As String
	
	Private _productos As EntitySet(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidEmpresaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEmpresaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._productos = New EntitySet(Of producto)(AddressOf Me.attach_productos, AddressOf Me.detach_productos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEmpresa", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idEmpresa() As Integer
		Get
			Return Me._idEmpresa
		End Get
		Set
			If ((Me._idEmpresa = value)  _
						= false) Then
				Me.OnidEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._idEmpresa = value
				Me.SendPropertyChanged("idEmpresa")
				Me.OnidEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_producto", Storage:="_productos", ThisKey:="idEmpresa", OtherKey:="idEmpresa")>  _
	Public Property productos() As EntitySet(Of producto)
		Get
			Return Me._productos
		End Get
		Set
			Me._productos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_productos(ByVal entity As producto)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_productos(ByVal entity As producto)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.producto")>  _
Partial Public Class producto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idProducto As Integer
	
	Private _idFamilia As System.Nullable(Of Integer)
	
	Private _idAlicuotaIva As System.Nullable(Of Integer)
	
	Private _descripcion As String
	
	Private _codProducto As String
	
	Private _activo As System.Nullable(Of Boolean)
	
	Private _precio As System.Nullable(Of Double)
	
	Private _idEmpresa As System.Nullable(Of Integer)
	
	Private _compraItems As EntitySet(Of compraItem)
	
	Private _kitProductos As EntitySet(Of kitProducto)
	
	Private _movimientoStocks As EntitySet(Of movimientoStock)
	
	Private _listaDePreciosItems As EntitySet(Of listaDePreciosItem)
	
	Private _comprobanteItems As EntitySet(Of comprobanteItem)
	
	Private _alicuotaIva As EntityRef(Of alicuotaIva)
	
	Private _empresa As EntityRef(Of empresa)
	
	Private _familia As EntityRef(Of familia)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidProductoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidProductoChanged()
    End Sub
    Partial Private Sub OnidFamiliaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFamiliaChanged()
    End Sub
    Partial Private Sub OnidAlicuotaIvaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidAlicuotaIvaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OncodProductoChanging(value As String)
    End Sub
    Partial Private Sub OncodProductoChanged()
    End Sub
    Partial Private Sub OnactivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnactivoChanged()
    End Sub
    Partial Private Sub OnprecioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnprecioChanged()
    End Sub
    Partial Private Sub OnidEmpresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEmpresaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraItems = New EntitySet(Of compraItem)(AddressOf Me.attach_compraItems, AddressOf Me.detach_compraItems)
		Me._kitProductos = New EntitySet(Of kitProducto)(AddressOf Me.attach_kitProductos, AddressOf Me.detach_kitProductos)
		Me._movimientoStocks = New EntitySet(Of movimientoStock)(AddressOf Me.attach_movimientoStocks, AddressOf Me.detach_movimientoStocks)
		Me._listaDePreciosItems = New EntitySet(Of listaDePreciosItem)(AddressOf Me.attach_listaDePreciosItems, AddressOf Me.detach_listaDePreciosItems)
		Me._comprobanteItems = New EntitySet(Of comprobanteItem)(AddressOf Me.attach_comprobanteItems, AddressOf Me.detach_comprobanteItems)
		Me._alicuotaIva = CType(Nothing, EntityRef(Of alicuotaIva))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		Me._familia = CType(Nothing, EntityRef(Of familia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProducto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idProducto() As Integer
		Get
			Return Me._idProducto
		End Get
		Set
			If ((Me._idProducto = value)  _
						= false) Then
				Me.OnidProductoChanging(value)
				Me.SendPropertyChanging
				Me._idProducto = value
				Me.SendPropertyChanged("idProducto")
				Me.OnidProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFamilia", DbType:="Int")>  _
	Public Property idFamilia() As System.Nullable(Of Integer)
		Get
			Return Me._idFamilia
		End Get
		Set
			If (Me._idFamilia.Equals(value) = false) Then
				If Me._familia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._idFamilia = value
				Me.SendPropertyChanged("idFamilia")
				Me.OnidFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idAlicuotaIva", DbType:="Int")>  _
	Public Property idAlicuotaIva() As System.Nullable(Of Integer)
		Get
			Return Me._idAlicuotaIva
		End Get
		Set
			If (Me._idAlicuotaIva.Equals(value) = false) Then
				If Me._alicuotaIva.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidAlicuotaIvaChanging(value)
				Me.SendPropertyChanging
				Me._idAlicuotaIva = value
				Me.SendPropertyChanged("idAlicuotaIva")
				Me.OnidAlicuotaIvaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codProducto", DbType:="VarChar(50)")>  _
	Public Property codProducto() As String
		Get
			Return Me._codProducto
		End Get
		Set
			If (String.Equals(Me._codProducto, value) = false) Then
				Me.OncodProductoChanging(value)
				Me.SendPropertyChanging
				Me._codProducto = value
				Me.SendPropertyChanged("codProducto")
				Me.OncodProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activo", DbType:="Bit")>  _
	Public Property activo() As System.Nullable(Of Boolean)
		Get
			Return Me._activo
		End Get
		Set
			If (Me._activo.Equals(value) = false) Then
				Me.OnactivoChanging(value)
				Me.SendPropertyChanging
				Me._activo = value
				Me.SendPropertyChanged("activo")
				Me.OnactivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio", DbType:="Float")>  _
	Public Property precio() As System.Nullable(Of Double)
		Get
			Return Me._precio
		End Get
		Set
			If (Me._precio.Equals(value) = false) Then
				Me.OnprecioChanging(value)
				Me.SendPropertyChanging
				Me._precio = value
				Me.SendPropertyChanged("precio")
				Me.OnprecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEmpresa", DbType:="Int")>  _
	Public Property idEmpresa() As System.Nullable(Of Integer)
		Get
			Return Me._idEmpresa
		End Get
		Set
			If (Me._idEmpresa.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEmpresaChanging(value)
				Me.SendPropertyChanging
				Me._idEmpresa = value
				Me.SendPropertyChanged("idEmpresa")
				Me.OnidEmpresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_compraItem", Storage:="_compraItems", ThisKey:="idProducto", OtherKey:="idProducto")>  _
	Public Property compraItems() As EntitySet(Of compraItem)
		Get
			Return Me._compraItems
		End Get
		Set
			Me._compraItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_kitProducto", Storage:="_kitProductos", ThisKey:="idProducto", OtherKey:="idProducto")>  _
	Public Property kitProductos() As EntitySet(Of kitProducto)
		Get
			Return Me._kitProductos
		End Get
		Set
			Me._kitProductos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_movimientoStock", Storage:="_movimientoStocks", ThisKey:="idProducto", OtherKey:="idProducto")>  _
	Public Property movimientoStocks() As EntitySet(Of movimientoStock)
		Get
			Return Me._movimientoStocks
		End Get
		Set
			Me._movimientoStocks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_listaDePreciosItem", Storage:="_listaDePreciosItems", ThisKey:="idProducto", OtherKey:="idProducto")>  _
	Public Property listaDePreciosItems() As EntitySet(Of listaDePreciosItem)
		Get
			Return Me._listaDePreciosItems
		End Get
		Set
			Me._listaDePreciosItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_comprobanteItem", Storage:="_comprobanteItems", ThisKey:="idProducto", OtherKey:="idProducto")>  _
	Public Property comprobanteItems() As EntitySet(Of comprobanteItem)
		Get
			Return Me._comprobanteItems
		End Get
		Set
			Me._comprobanteItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="alicuotaIva_producto", Storage:="_alicuotaIva", ThisKey:="idAlicuotaIva", OtherKey:="idAlicuotaIva", IsForeignKey:=true)>  _
	Public Property alicuotaIva() As alicuotaIva
		Get
			Return Me._alicuotaIva.Entity
		End Get
		Set
			Dim previousValue As alicuotaIva = Me._alicuotaIva.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._alicuotaIva.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._alicuotaIva.Entity = Nothing
					previousValue.productos.Remove(Me)
				End If
				Me._alicuotaIva.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.productos.Add(Me)
					Me._idAlicuotaIva = value.idAlicuotaIva
				Else
					Me._idAlicuotaIva = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("alicuotaIva")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_producto", Storage:="_empresa", ThisKey:="idEmpresa", OtherKey:="idEmpresa", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.productos.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.productos.Add(Me)
					Me._idEmpresa = value.idEmpresa
				Else
					Me._idEmpresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="familia_producto", Storage:="_familia", ThisKey:="idFamilia", OtherKey:="idFamilia", IsForeignKey:=true)>  _
	Public Property familia() As familia
		Get
			Return Me._familia.Entity
		End Get
		Set
			Dim previousValue As familia = Me._familia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._familia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._familia.Entity = Nothing
					previousValue.productos.Remove(Me)
				End If
				Me._familia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.productos.Add(Me)
					Me._idFamilia = value.idFamilia
				Else
					Me._idFamilia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("familia")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_compraItems(ByVal entity As compraItem)
		Me.SendPropertyChanging
		entity.producto = Me
	End Sub
	
	Private Sub detach_compraItems(ByVal entity As compraItem)
		Me.SendPropertyChanging
		entity.producto = Nothing
	End Sub
	
	Private Sub attach_kitProductos(ByVal entity As kitProducto)
		Me.SendPropertyChanging
		entity.producto = Me
	End Sub
	
	Private Sub detach_kitProductos(ByVal entity As kitProducto)
		Me.SendPropertyChanging
		entity.producto = Nothing
	End Sub
	
	Private Sub attach_movimientoStocks(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.producto = Me
	End Sub
	
	Private Sub detach_movimientoStocks(ByVal entity As movimientoStock)
		Me.SendPropertyChanging
		entity.producto = Nothing
	End Sub
	
	Private Sub attach_listaDePreciosItems(ByVal entity As listaDePreciosItem)
		Me.SendPropertyChanging
		entity.producto = Me
	End Sub
	
	Private Sub detach_listaDePreciosItems(ByVal entity As listaDePreciosItem)
		Me.SendPropertyChanging
		entity.producto = Nothing
	End Sub
	
	Private Sub attach_comprobanteItems(ByVal entity As comprobanteItem)
		Me.SendPropertyChanging
		entity.producto = Me
	End Sub
	
	Private Sub detach_comprobanteItems(ByVal entity As comprobanteItem)
		Me.SendPropertyChanging
		entity.producto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.condicionPago")>  _
Partial Public Class condicionPago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCondicionPago As Integer
	
	Private _descripcion As String
	
	Private _proveedors As EntitySet(Of proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCondicionPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCondicionPagoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._proveedors = New EntitySet(Of proveedor)(AddressOf Me.attach_proveedors, AddressOf Me.detach_proveedors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCondicionPago", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idCondicionPago() As Integer
		Get
			Return Me._idCondicionPago
		End Get
		Set
			If ((Me._idCondicionPago = value)  _
						= false) Then
				Me.OnidCondicionPagoChanging(value)
				Me.SendPropertyChanging
				Me._idCondicionPago = value
				Me.SendPropertyChanged("idCondicionPago")
				Me.OnidCondicionPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="condicionPago_proveedor", Storage:="_proveedors", ThisKey:="idCondicionPago", OtherKey:="idCondicionPago")>  _
	Public Property proveedors() As EntitySet(Of proveedor)
		Get
			Return Me._proveedors
		End Get
		Set
			Me._proveedors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_proveedors(ByVal entity As proveedor)
		Me.SendPropertyChanging
		entity.condicionPago = Me
	End Sub
	
	Private Sub detach_proveedors(ByVal entity As proveedor)
		Me.SendPropertyChanging
		entity.condicionPago = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.proveedor")>  _
Partial Public Class proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cuit As Long
	
	Private _razonSocial As String
	
	Private _idLocalidad As System.Nullable(Of Integer)
	
	Private _domicilio As String
	
	Private _codigoPostal As String
	
	Private _telefono As String
	
	Private _email As String
	
	Private _observaciones As String
	
	Private _idProveedor As Integer
	
	Private _idCondicionPago As System.Nullable(Of Integer)
	
	Private _cuentaCorriente As System.Nullable(Of Integer)
	
	Private _compraCabes As EntitySet(Of compraCabe)
	
	Private _condicionPago As EntityRef(Of condicionPago)
	
	Private _localidad As EntityRef(Of localidad)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncuitChanging(value As Long)
    End Sub
    Partial Private Sub OncuitChanged()
    End Sub
    Partial Private Sub OnrazonSocialChanging(value As String)
    End Sub
    Partial Private Sub OnrazonSocialChanged()
    End Sub
    Partial Private Sub OnidLocalidadChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidLocalidadChanged()
    End Sub
    Partial Private Sub OndomicilioChanging(value As String)
    End Sub
    Partial Private Sub OndomicilioChanged()
    End Sub
    Partial Private Sub OncodigoPostalChanging(value As String)
    End Sub
    Partial Private Sub OncodigoPostalChanged()
    End Sub
    Partial Private Sub OntelefonoChanging(value As String)
    End Sub
    Partial Private Sub OntelefonoChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnobservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionesChanged()
    End Sub
    Partial Private Sub OnidProveedorChanging(value As Integer)
    End Sub
    Partial Private Sub OnidProveedorChanged()
    End Sub
    Partial Private Sub OnidCondicionPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidCondicionPagoChanged()
    End Sub
    Partial Private Sub OncuentaCorrienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncuentaCorrienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._compraCabes = New EntitySet(Of compraCabe)(AddressOf Me.attach_compraCabes, AddressOf Me.detach_compraCabes)
		Me._condicionPago = CType(Nothing, EntityRef(Of condicionPago))
		Me._localidad = CType(Nothing, EntityRef(Of localidad))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuit", DbType:="BigInt NOT NULL")>  _
	Public Property cuit() As Long
		Get
			Return Me._cuit
		End Get
		Set
			If ((Me._cuit = value)  _
						= false) Then
				Me.OncuitChanging(value)
				Me.SendPropertyChanging
				Me._cuit = value
				Me.SendPropertyChanged("cuit")
				Me.OncuitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_razonSocial", DbType:="VarChar(100)")>  _
	Public Property razonSocial() As String
		Get
			Return Me._razonSocial
		End Get
		Set
			If (String.Equals(Me._razonSocial, value) = false) Then
				Me.OnrazonSocialChanging(value)
				Me.SendPropertyChanging
				Me._razonSocial = value
				Me.SendPropertyChanged("razonSocial")
				Me.OnrazonSocialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLocalidad", DbType:="Int")>  _
	Public Property idLocalidad() As System.Nullable(Of Integer)
		Get
			Return Me._idLocalidad
		End Get
		Set
			If (Me._idLocalidad.Equals(value) = false) Then
				If Me._localidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidLocalidadChanging(value)
				Me.SendPropertyChanging
				Me._idLocalidad = value
				Me.SendPropertyChanged("idLocalidad")
				Me.OnidLocalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_domicilio", DbType:="VarChar(100)")>  _
	Public Property domicilio() As String
		Get
			Return Me._domicilio
		End Get
		Set
			If (String.Equals(Me._domicilio, value) = false) Then
				Me.OndomicilioChanging(value)
				Me.SendPropertyChanging
				Me._domicilio = value
				Me.SendPropertyChanged("domicilio")
				Me.OndomicilioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigoPostal", DbType:="Char(10)")>  _
	Public Property codigoPostal() As String
		Get
			Return Me._codigoPostal
		End Get
		Set
			If (String.Equals(Me._codigoPostal, value) = false) Then
				Me.OncodigoPostalChanging(value)
				Me.SendPropertyChanging
				Me._codigoPostal = value
				Me.SendPropertyChanged("codigoPostal")
				Me.OncodigoPostalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono", DbType:="VarChar(20)")>  _
	Public Property telefono() As String
		Get
			Return Me._telefono
		End Get
		Set
			If (String.Equals(Me._telefono, value) = false) Then
				Me.OntelefonoChanging(value)
				Me.SendPropertyChanging
				Me._telefono = value
				Me.SendPropertyChanged("telefono")
				Me.OntelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(100)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observaciones", DbType:="VarChar(250)")>  _
	Public Property observaciones() As String
		Get
			Return Me._observaciones
		End Get
		Set
			If (String.Equals(Me._observaciones, value) = false) Then
				Me.OnobservacionesChanging(value)
				Me.SendPropertyChanging
				Me._observaciones = value
				Me.SendPropertyChanged("observaciones")
				Me.OnobservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idProveedor() As Integer
		Get
			Return Me._idProveedor
		End Get
		Set
			If ((Me._idProveedor = value)  _
						= false) Then
				Me.OnidProveedorChanging(value)
				Me.SendPropertyChanging
				Me._idProveedor = value
				Me.SendPropertyChanged("idProveedor")
				Me.OnidProveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCondicionPago", DbType:="Int")>  _
	Public Property idCondicionPago() As System.Nullable(Of Integer)
		Get
			Return Me._idCondicionPago
		End Get
		Set
			If (Me._idCondicionPago.Equals(value) = false) Then
				If Me._condicionPago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidCondicionPagoChanging(value)
				Me.SendPropertyChanging
				Me._idCondicionPago = value
				Me.SendPropertyChanged("idCondicionPago")
				Me.OnidCondicionPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuentaCorriente", DbType:="Int")>  _
	Public Property cuentaCorriente() As System.Nullable(Of Integer)
		Get
			Return Me._cuentaCorriente
		End Get
		Set
			If (Me._cuentaCorriente.Equals(value) = false) Then
				Me.OncuentaCorrienteChanging(value)
				Me.SendPropertyChanging
				Me._cuentaCorriente = value
				Me.SendPropertyChanged("cuentaCorriente")
				Me.OncuentaCorrienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="proveedor_compraCabe", Storage:="_compraCabes", ThisKey:="idProveedor", OtherKey:="idProveedor")>  _
	Public Property compraCabes() As EntitySet(Of compraCabe)
		Get
			Return Me._compraCabes
		End Get
		Set
			Me._compraCabes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="condicionPago_proveedor", Storage:="_condicionPago", ThisKey:="idCondicionPago", OtherKey:="idCondicionPago", IsForeignKey:=true)>  _
	Public Property condicionPago() As condicionPago
		Get
			Return Me._condicionPago.Entity
		End Get
		Set
			Dim previousValue As condicionPago = Me._condicionPago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._condicionPago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._condicionPago.Entity = Nothing
					previousValue.proveedors.Remove(Me)
				End If
				Me._condicionPago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.proveedors.Add(Me)
					Me._idCondicionPago = value.idCondicionPago
				Else
					Me._idCondicionPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("condicionPago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="localidad_proveedor", Storage:="_localidad", ThisKey:="idLocalidad", OtherKey:="idLocalidad", IsForeignKey:=true)>  _
	Public Property localidad() As localidad
		Get
			Return Me._localidad.Entity
		End Get
		Set
			Dim previousValue As localidad = Me._localidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._localidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._localidad.Entity = Nothing
					previousValue.proveedors.Remove(Me)
				End If
				Me._localidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.proveedors.Add(Me)
					Me._idLocalidad = value.idLocalidad
				Else
					Me._idLocalidad = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("localidad")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.proveedor = Me
	End Sub
	
	Private Sub detach_compraCabes(ByVal entity As compraCabe)
		Me.SendPropertyChanging
		entity.proveedor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.banco")>  _
Partial Public Class banco
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idBanco As Integer
	
	Private _descripcion As String
	
	Private _codigo As String
	
	Private _cheques As EntitySet(Of cheque)
	
	Private _depositos As EntitySet(Of deposito)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidBancoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidBancoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OncodigoChanging(value As String)
    End Sub
    Partial Private Sub OncodigoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cheques = New EntitySet(Of cheque)(AddressOf Me.attach_cheques, AddressOf Me.detach_cheques)
		Me._depositos = New EntitySet(Of deposito)(AddressOf Me.attach_depositos, AddressOf Me.detach_depositos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idBanco", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idBanco() As Integer
		Get
			Return Me._idBanco
		End Get
		Set
			If ((Me._idBanco = value)  _
						= false) Then
				Me.OnidBancoChanging(value)
				Me.SendPropertyChanging
				Me._idBanco = value
				Me.SendPropertyChanged("idBanco")
				Me.OnidBancoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigo", DbType:="NChar(10)")>  _
	Public Property codigo() As String
		Get
			Return Me._codigo
		End Get
		Set
			If (String.Equals(Me._codigo, value) = false) Then
				Me.OncodigoChanging(value)
				Me.SendPropertyChanging
				Me._codigo = value
				Me.SendPropertyChanged("codigo")
				Me.OncodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="banco_cheque", Storage:="_cheques", ThisKey:="idBanco", OtherKey:="idBanco")>  _
	Public Property cheques() As EntitySet(Of cheque)
		Get
			Return Me._cheques
		End Get
		Set
			Me._cheques.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="banco_deposito", Storage:="_depositos", ThisKey:="idBanco", OtherKey:="idBanco")>  _
	Public Property depositos() As EntitySet(Of deposito)
		Get
			Return Me._depositos
		End Get
		Set
			Me._depositos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cheques(ByVal entity As cheque)
		Me.SendPropertyChanging
		entity.banco = Me
	End Sub
	
	Private Sub detach_cheques(ByVal entity As cheque)
		Me.SendPropertyChanging
		entity.banco = Nothing
	End Sub
	
	Private Sub attach_depositos(ByVal entity As deposito)
		Me.SendPropertyChanging
		entity.banco = Me
	End Sub
	
	Private Sub detach_depositos(ByVal entity As deposito)
		Me.SendPropertyChanging
		entity.banco = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.formaDePago")>  _
Partial Public Class formaDePago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idFormaDePago As Integer
	
	Private _descripcion As String
	
	Private _esTarjeta As System.Nullable(Of Integer)
	
	Private _cobros As EntitySet(Of cobro)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidFormaDePagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidFormaDePagoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub OnesTarjetaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnesTarjetaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cobros = New EntitySet(Of cobro)(AddressOf Me.attach_cobros, AddressOf Me.detach_cobros)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFormaDePago", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idFormaDePago() As Integer
		Get
			Return Me._idFormaDePago
		End Get
		Set
			If ((Me._idFormaDePago = value)  _
						= false) Then
				Me.OnidFormaDePagoChanging(value)
				Me.SendPropertyChanging
				Me._idFormaDePago = value
				Me.SendPropertyChanged("idFormaDePago")
				Me.OnidFormaDePagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(100)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_esTarjeta", DbType:="Int")>  _
	Public Property esTarjeta() As System.Nullable(Of Integer)
		Get
			Return Me._esTarjeta
		End Get
		Set
			If (Me._esTarjeta.Equals(value) = false) Then
				Me.OnesTarjetaChanging(value)
				Me.SendPropertyChanging
				Me._esTarjeta = value
				Me.SendPropertyChanged("esTarjeta")
				Me.OnesTarjetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formaDePago_cobro", Storage:="_cobros", ThisKey:="idFormaDePago", OtherKey:="idFormaPago")>  _
	Public Property cobros() As EntitySet(Of cobro)
		Get
			Return Me._cobros
		End Get
		Set
			Me._cobros.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cobros(ByVal entity As cobro)
		Me.SendPropertyChanging
		entity.formaDePago = Me
	End Sub
	
	Private Sub detach_cobros(ByVal entity As cobro)
		Me.SendPropertyChanging
		entity.formaDePago = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.familia")>  _
Partial Public Class familia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idFamilia As Integer
	
	Private _descripcion As String
	
	Private _productos As EntitySet(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidFamiliaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidFamiliaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._productos = New EntitySet(Of producto)(AddressOf Me.attach_productos, AddressOf Me.detach_productos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFamilia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idFamilia() As Integer
		Get
			Return Me._idFamilia
		End Get
		Set
			If ((Me._idFamilia = value)  _
						= false) Then
				Me.OnidFamiliaChanging(value)
				Me.SendPropertyChanging
				Me._idFamilia = value
				Me.SendPropertyChanged("idFamilia")
				Me.OnidFamiliaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(200)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="familia_producto", Storage:="_productos", ThisKey:="idFamilia", OtherKey:="idFamilia")>  _
	Public Property productos() As EntitySet(Of producto)
		Get
			Return Me._productos
		End Get
		Set
			Me._productos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_productos(ByVal entity As producto)
		Me.SendPropertyChanging
		entity.familia = Me
	End Sub
	
	Private Sub detach_productos(ByVal entity As producto)
		Me.SendPropertyChanging
		entity.familia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.listaDePreciosItem")>  _
Partial Public Class listaDePreciosItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idListaDePreciosItem As Integer
	
	Private _idProducto As System.Nullable(Of Integer)
	
	Private _codigo As String
	
	Private _precio As System.Nullable(Of Double)
	
	Private _idListaDePrecios As System.Nullable(Of Integer)
	
	Private _listaDePrecio As EntityRef(Of listaDePrecio)
	
	Private _producto As EntityRef(Of producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidListaDePreciosItemChanging(value As Integer)
    End Sub
    Partial Private Sub OnidListaDePreciosItemChanged()
    End Sub
    Partial Private Sub OnidProductoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProductoChanged()
    End Sub
    Partial Private Sub OncodigoChanging(value As String)
    End Sub
    Partial Private Sub OncodigoChanged()
    End Sub
    Partial Private Sub OnprecioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnprecioChanged()
    End Sub
    Partial Private Sub OnidListaDePreciosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidListaDePreciosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._listaDePrecio = CType(Nothing, EntityRef(Of listaDePrecio))
		Me._producto = CType(Nothing, EntityRef(Of producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idListaDePreciosItem", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idListaDePreciosItem() As Integer
		Get
			Return Me._idListaDePreciosItem
		End Get
		Set
			If ((Me._idListaDePreciosItem = value)  _
						= false) Then
				Me.OnidListaDePreciosItemChanging(value)
				Me.SendPropertyChanging
				Me._idListaDePreciosItem = value
				Me.SendPropertyChanged("idListaDePreciosItem")
				Me.OnidListaDePreciosItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProducto", DbType:="Int")>  _
	Public Property idProducto() As System.Nullable(Of Integer)
		Get
			Return Me._idProducto
		End Get
		Set
			If (Me._idProducto.Equals(value) = false) Then
				If Me._producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProductoChanging(value)
				Me.SendPropertyChanging
				Me._idProducto = value
				Me.SendPropertyChanged("idProducto")
				Me.OnidProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigo", DbType:="VarChar(100)")>  _
	Public Property codigo() As String
		Get
			Return Me._codigo
		End Get
		Set
			If (String.Equals(Me._codigo, value) = false) Then
				Me.OncodigoChanging(value)
				Me.SendPropertyChanging
				Me._codigo = value
				Me.SendPropertyChanged("codigo")
				Me.OncodigoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio", DbType:="Float")>  _
	Public Property precio() As System.Nullable(Of Double)
		Get
			Return Me._precio
		End Get
		Set
			If (Me._precio.Equals(value) = false) Then
				Me.OnprecioChanging(value)
				Me.SendPropertyChanging
				Me._precio = value
				Me.SendPropertyChanged("precio")
				Me.OnprecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idListaDePrecios", DbType:="Int")>  _
	Public Property idListaDePrecios() As System.Nullable(Of Integer)
		Get
			Return Me._idListaDePrecios
		End Get
		Set
			If (Me._idListaDePrecios.Equals(value) = false) Then
				If Me._listaDePrecio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidListaDePreciosChanging(value)
				Me.SendPropertyChanging
				Me._idListaDePrecios = value
				Me.SendPropertyChanged("idListaDePrecios")
				Me.OnidListaDePreciosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDePrecio_listaDePreciosItem", Storage:="_listaDePrecio", ThisKey:="idListaDePrecios", OtherKey:="idListaDePrecios", IsForeignKey:=true)>  _
	Public Property listaDePrecio() As listaDePrecio
		Get
			Return Me._listaDePrecio.Entity
		End Get
		Set
			Dim previousValue As listaDePrecio = Me._listaDePrecio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._listaDePrecio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._listaDePrecio.Entity = Nothing
					previousValue.listaDePreciosItems.Remove(Me)
				End If
				Me._listaDePrecio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.listaDePreciosItems.Add(Me)
					Me._idListaDePrecios = value.idListaDePrecios
				Else
					Me._idListaDePrecios = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("listaDePrecio")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_listaDePreciosItem", Storage:="_producto", ThisKey:="idProducto", OtherKey:="idProducto", IsForeignKey:=true)>  _
	Public Property producto() As producto
		Get
			Return Me._producto.Entity
		End Get
		Set
			Dim previousValue As producto = Me._producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._producto.Entity = Nothing
					previousValue.listaDePreciosItems.Remove(Me)
				End If
				Me._producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.listaDePreciosItems.Add(Me)
					Me._idProducto = value.idProducto
				Else
					Me._idProducto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.comprobanteAsociado")>  _
Partial Public Class comprobanteAsociado
	
	Private _idComprobante As Integer
	
	Private _idComprobanteAsociado As Integer
	
	Private _importeAsociado As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idComprobante", DbType:="Int NOT NULL")>  _
	Public Property idComprobante() As Integer
		Get
			Return Me._idComprobante
		End Get
		Set
			If ((Me._idComprobante = value)  _
						= false) Then
				Me._idComprobante = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idComprobanteAsociado", DbType:="Int NOT NULL")>  _
	Public Property idComprobanteAsociado() As Integer
		Get
			Return Me._idComprobanteAsociado
		End Get
		Set
			If ((Me._idComprobanteAsociado = value)  _
						= false) Then
				Me._idComprobanteAsociado = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importeAsociado", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property importeAsociado() As Decimal
		Get
			Return Me._importeAsociado
		End Get
		Set
			If ((Me._importeAsociado = value)  _
						= false) Then
				Me._importeAsociado = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.comprobanteItem")>  _
Partial Public Class comprobanteItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idComprobanteItem As Integer
	
	Private _idComprobante As Integer
	
	Private _idProducto As System.Nullable(Of Integer)
	
	Private _cantidad As Integer
	
	Private _precioUnitario As Decimal
	
	Private _descuento As Decimal
	
	Private _descripcion As String
	
	Private _producto As EntityRef(Of producto)
	
	Private _comprobanteCabe As EntityRef(Of comprobanteCabe)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidComprobanteItemChanging(value As Integer)
    End Sub
    Partial Private Sub OnidComprobanteItemChanged()
    End Sub
    Partial Private Sub OnidComprobanteChanging(value As Integer)
    End Sub
    Partial Private Sub OnidComprobanteChanged()
    End Sub
    Partial Private Sub OnidProductoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidProductoChanged()
    End Sub
    Partial Private Sub OncantidadChanging(value As Integer)
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub OnprecioUnitarioChanging(value As Decimal)
    End Sub
    Partial Private Sub OnprecioUnitarioChanged()
    End Sub
    Partial Private Sub OndescuentoChanging(value As Decimal)
    End Sub
    Partial Private Sub OndescuentoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._producto = CType(Nothing, EntityRef(Of producto))
		Me._comprobanteCabe = CType(Nothing, EntityRef(Of comprobanteCabe))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idComprobanteItem", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idComprobanteItem() As Integer
		Get
			Return Me._idComprobanteItem
		End Get
		Set
			If ((Me._idComprobanteItem = value)  _
						= false) Then
				Me.OnidComprobanteItemChanging(value)
				Me.SendPropertyChanging
				Me._idComprobanteItem = value
				Me.SendPropertyChanged("idComprobanteItem")
				Me.OnidComprobanteItemChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idComprobante", DbType:="Int NOT NULL")>  _
	Public Property idComprobante() As Integer
		Get
			Return Me._idComprobante
		End Get
		Set
			If ((Me._idComprobante = value)  _
						= false) Then
				If Me._comprobanteCabe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidComprobanteChanging(value)
				Me.SendPropertyChanging
				Me._idComprobante = value
				Me.SendPropertyChanged("idComprobante")
				Me.OnidComprobanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idProducto", DbType:="Int")>  _
	Public Property idProducto() As System.Nullable(Of Integer)
		Get
			Return Me._idProducto
		End Get
		Set
			If (Me._idProducto.Equals(value) = false) Then
				If Me._producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidProductoChanging(value)
				Me.SendPropertyChanging
				Me._idProducto = value
				Me.SendPropertyChanged("idProducto")
				Me.OnidProductoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="Int NOT NULL")>  _
	Public Property cantidad() As Integer
		Get
			Return Me._cantidad
		End Get
		Set
			If ((Me._cantidad = value)  _
						= false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precioUnitario", DbType:="Decimal(10,2) NOT NULL")>  _
	Public Property precioUnitario() As Decimal
		Get
			Return Me._precioUnitario
		End Get
		Set
			If ((Me._precioUnitario = value)  _
						= false) Then
				Me.OnprecioUnitarioChanging(value)
				Me.SendPropertyChanging
				Me._precioUnitario = value
				Me.SendPropertyChanged("precioUnitario")
				Me.OnprecioUnitarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descuento", DbType:="Decimal(5,2) NOT NULL")>  _
	Public Property descuento() As Decimal
		Get
			Return Me._descuento
		End Get
		Set
			If ((Me._descuento = value)  _
						= false) Then
				Me.OndescuentoChanging(value)
				Me.SendPropertyChanging
				Me._descuento = value
				Me.SendPropertyChanged("descuento")
				Me.OndescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="producto_comprobanteItem", Storage:="_producto", ThisKey:="idProducto", OtherKey:="idProducto", IsForeignKey:=true)>  _
	Public Property producto() As producto
		Get
			Return Me._producto.Entity
		End Get
		Set
			Dim previousValue As producto = Me._producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._producto.Entity = Nothing
					previousValue.comprobanteItems.Remove(Me)
				End If
				Me._producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobanteItems.Add(Me)
					Me._idProducto = value.idProducto
				Else
					Me._idProducto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("producto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="comprobanteCabe_comprobanteItem", Storage:="_comprobanteCabe", ThisKey:="idComprobante", OtherKey:="idComprobante", IsForeignKey:=true)>  _
	Public Property comprobanteCabe() As comprobanteCabe
		Get
			Return Me._comprobanteCabe.Entity
		End Get
		Set
			Dim previousValue As comprobanteCabe = Me._comprobanteCabe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._comprobanteCabe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._comprobanteCabe.Entity = Nothing
					previousValue.comprobanteItems.Remove(Me)
				End If
				Me._comprobanteCabe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobanteItems.Add(Me)
					Me._idComprobante = value.idComprobante
				Else
					Me._idComprobante = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("comprobanteCabe")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.comprobanteCabe")>  _
Partial Public Class comprobanteCabe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idComprobante As Integer
	
	Private _tipo As System.Nullable(Of Char)
	
	Private _numero As String
	
	Private _letra As System.Nullable(Of Char)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _idCliente As System.Nullable(Of Integer)
	
	Private _idListaPrecio As System.Nullable(Of Integer)
	
	Private _numeroAsociado As String
	
	Private _condicionVenta As String
	
	Private _idVendedor As System.Nullable(Of Integer)
	
	Private _idTipoOrden As System.Nullable(Of Integer)
	
	Private _comprobanteItems As EntitySet(Of comprobanteItem)
	
	Private _cobros As EntitySet(Of cobro)
	
	Private _cliente As EntityRef(Of cliente)
	
	Private _listaDePrecio As EntityRef(Of listaDePrecio)
	
	Private _tipoOrden As EntityRef(Of tipoOrden)
	
	Private _vendedor As EntityRef(Of vendedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidComprobanteChanging(value As Integer)
    End Sub
    Partial Private Sub OnidComprobanteChanged()
    End Sub
    Partial Private Sub OntipoChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OntipoChanged()
    End Sub
    Partial Private Sub OnnumeroChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroChanged()
    End Sub
    Partial Private Sub OnletraChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnletraChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnidClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidClienteChanged()
    End Sub
    Partial Private Sub OnidListaPrecioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidListaPrecioChanged()
    End Sub
    Partial Private Sub OnnumeroAsociadoChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroAsociadoChanged()
    End Sub
    Partial Private Sub OncondicionVentaChanging(value As String)
    End Sub
    Partial Private Sub OncondicionVentaChanged()
    End Sub
    Partial Private Sub OnidVendedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidVendedorChanged()
    End Sub
    Partial Private Sub OnidTipoOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoOrdenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._comprobanteItems = New EntitySet(Of comprobanteItem)(AddressOf Me.attach_comprobanteItems, AddressOf Me.detach_comprobanteItems)
		Me._cobros = New EntitySet(Of cobro)(AddressOf Me.attach_cobros, AddressOf Me.detach_cobros)
		Me._cliente = CType(Nothing, EntityRef(Of cliente))
		Me._listaDePrecio = CType(Nothing, EntityRef(Of listaDePrecio))
		Me._tipoOrden = CType(Nothing, EntityRef(Of tipoOrden))
		Me._vendedor = CType(Nothing, EntityRef(Of vendedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idComprobante", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idComprobante() As Integer
		Get
			Return Me._idComprobante
		End Get
		Set
			If ((Me._idComprobante = value)  _
						= false) Then
				Me.OnidComprobanteChanging(value)
				Me.SendPropertyChanging
				Me._idComprobante = value
				Me.SendPropertyChanged("idComprobante")
				Me.OnidComprobanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo", DbType:="Char(1)")>  _
	Public Property tipo() As System.Nullable(Of Char)
		Get
			Return Me._tipo
		End Get
		Set
			If (Me._tipo.Equals(value) = false) Then
				Me.OntipoChanging(value)
				Me.SendPropertyChanging
				Me._tipo = value
				Me.SendPropertyChanged("tipo")
				Me.OntipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numero", DbType:="VarChar(13)")>  _
	Public Property numero() As String
		Get
			Return Me._numero
		End Get
		Set
			If (String.Equals(Me._numero, value) = false) Then
				Me.OnnumeroChanging(value)
				Me.SendPropertyChanging
				Me._numero = value
				Me.SendPropertyChanged("numero")
				Me.OnnumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_letra", DbType:="Char(1)")>  _
	Public Property letra() As System.Nullable(Of Char)
		Get
			Return Me._letra
		End Get
		Set
			If (Me._letra.Equals(value) = false) Then
				Me.OnletraChanging(value)
				Me.SendPropertyChanging
				Me._letra = value
				Me.SendPropertyChanged("letra")
				Me.OnletraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCliente", DbType:="Int")>  _
	Public Property idCliente() As System.Nullable(Of Integer)
		Get
			Return Me._idCliente
		End Get
		Set
			If (Me._idCliente.Equals(value) = false) Then
				If Me._cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidClienteChanging(value)
				Me.SendPropertyChanging
				Me._idCliente = value
				Me.SendPropertyChanged("idCliente")
				Me.OnidClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idListaPrecio", DbType:="Int")>  _
	Public Property idListaPrecio() As System.Nullable(Of Integer)
		Get
			Return Me._idListaPrecio
		End Get
		Set
			If (Me._idListaPrecio.Equals(value) = false) Then
				If Me._listaDePrecio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidListaPrecioChanging(value)
				Me.SendPropertyChanging
				Me._idListaPrecio = value
				Me.SendPropertyChanged("idListaPrecio")
				Me.OnidListaPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numeroAsociado", DbType:="VarChar(13)")>  _
	Public Property numeroAsociado() As String
		Get
			Return Me._numeroAsociado
		End Get
		Set
			If (String.Equals(Me._numeroAsociado, value) = false) Then
				Me.OnnumeroAsociadoChanging(value)
				Me.SendPropertyChanging
				Me._numeroAsociado = value
				Me.SendPropertyChanged("numeroAsociado")
				Me.OnnumeroAsociadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_condicionVenta", DbType:="Char(2)")>  _
	Public Property condicionVenta() As String
		Get
			Return Me._condicionVenta
		End Get
		Set
			If (String.Equals(Me._condicionVenta, value) = false) Then
				Me.OncondicionVentaChanging(value)
				Me.SendPropertyChanging
				Me._condicionVenta = value
				Me.SendPropertyChanged("condicionVenta")
				Me.OncondicionVentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idVendedor", DbType:="Int")>  _
	Public Property idVendedor() As System.Nullable(Of Integer)
		Get
			Return Me._idVendedor
		End Get
		Set
			If (Me._idVendedor.Equals(value) = false) Then
				If Me._vendedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidVendedorChanging(value)
				Me.SendPropertyChanging
				Me._idVendedor = value
				Me.SendPropertyChanged("idVendedor")
				Me.OnidVendedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoOrden", DbType:="Int")>  _
	Public Property idTipoOrden() As System.Nullable(Of Integer)
		Get
			Return Me._idTipoOrden
		End Get
		Set
			If (Me._idTipoOrden.Equals(value) = false) Then
				If Me._tipoOrden.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTipoOrdenChanging(value)
				Me.SendPropertyChanging
				Me._idTipoOrden = value
				Me.SendPropertyChanged("idTipoOrden")
				Me.OnidTipoOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="comprobanteCabe_comprobanteItem", Storage:="_comprobanteItems", ThisKey:="idComprobante", OtherKey:="idComprobante")>  _
	Public Property comprobanteItems() As EntitySet(Of comprobanteItem)
		Get
			Return Me._comprobanteItems
		End Get
		Set
			Me._comprobanteItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="comprobanteCabe_cobro", Storage:="_cobros", ThisKey:="idComprobante", OtherKey:="idComprobante")>  _
	Public Property cobros() As EntitySet(Of cobro)
		Get
			Return Me._cobros
		End Get
		Set
			Me._cobros.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cliente_comprobanteCabe", Storage:="_cliente", ThisKey:="idCliente", OtherKey:="idCliente", IsForeignKey:=true)>  _
	Public Property cliente() As cliente
		Get
			Return Me._cliente.Entity
		End Get
		Set
			Dim previousValue As cliente = Me._cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cliente.Entity = Nothing
					previousValue.comprobanteCabes.Remove(Me)
				End If
				Me._cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobanteCabes.Add(Me)
					Me._idCliente = value.idCliente
				Else
					Me._idCliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDePrecio_comprobanteCabe", Storage:="_listaDePrecio", ThisKey:="idListaPrecio", OtherKey:="idListaDePrecios", IsForeignKey:=true)>  _
	Public Property listaDePrecio() As listaDePrecio
		Get
			Return Me._listaDePrecio.Entity
		End Get
		Set
			Dim previousValue As listaDePrecio = Me._listaDePrecio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._listaDePrecio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._listaDePrecio.Entity = Nothing
					previousValue.comprobanteCabes.Remove(Me)
				End If
				Me._listaDePrecio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobanteCabes.Add(Me)
					Me._idListaPrecio = value.idListaDePrecios
				Else
					Me._idListaPrecio = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("listaDePrecio")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoOrden_comprobanteCabe", Storage:="_tipoOrden", ThisKey:="idTipoOrden", OtherKey:="idTipoOrden", IsForeignKey:=true)>  _
	Public Property tipoOrden() As tipoOrden
		Get
			Return Me._tipoOrden.Entity
		End Get
		Set
			Dim previousValue As tipoOrden = Me._tipoOrden.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipoOrden.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipoOrden.Entity = Nothing
					previousValue.comprobanteCabes.Remove(Me)
				End If
				Me._tipoOrden.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobanteCabes.Add(Me)
					Me._idTipoOrden = value.idTipoOrden
				Else
					Me._idTipoOrden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipoOrden")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="vendedor_comprobanteCabe", Storage:="_vendedor", ThisKey:="idVendedor", OtherKey:="idVendedor", IsForeignKey:=true)>  _
	Public Property vendedor() As vendedor
		Get
			Return Me._vendedor.Entity
		End Get
		Set
			Dim previousValue As vendedor = Me._vendedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._vendedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._vendedor.Entity = Nothing
					previousValue.comprobanteCabes.Remove(Me)
				End If
				Me._vendedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobanteCabes.Add(Me)
					Me._idVendedor = value.idVendedor
				Else
					Me._idVendedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("vendedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_comprobanteItems(ByVal entity As comprobanteItem)
		Me.SendPropertyChanging
		entity.comprobanteCabe = Me
	End Sub
	
	Private Sub detach_comprobanteItems(ByVal entity As comprobanteItem)
		Me.SendPropertyChanging
		entity.comprobanteCabe = Nothing
	End Sub
	
	Private Sub attach_cobros(ByVal entity As cobro)
		Me.SendPropertyChanging
		entity.comprobanteCabe = Me
	End Sub
	
	Private Sub detach_cobros(ByVal entity As cobro)
		Me.SendPropertyChanging
		entity.comprobanteCabe = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cobro")>  _
Partial Public Class cobro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCobro As Integer
	
	Private _idComprobante As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _idFormaPago As System.Nullable(Of Integer)
	
	Private _importe As System.Nullable(Of Decimal)
	
	Private _idTipoTarjeta As System.Nullable(Of Integer)
	
	Private _tarjetaCupon As String
	
	Private _tarjetaAutorizacion As String
	
	Private _tarjetaCuotas As System.Nullable(Of Integer)
	
	Private _comprobanteCabe As EntityRef(Of comprobanteCabe)
	
	Private _formaDePago As EntityRef(Of formaDePago)
	
	Private _tipoTarjeta As EntityRef(Of tipoTarjeta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCobroChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCobroChanged()
    End Sub
    Partial Private Sub OnidComprobanteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidComprobanteChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnidFormaPagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFormaPagoChanged()
    End Sub
    Partial Private Sub OnimporteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnimporteChanged()
    End Sub
    Partial Private Sub OnidTipoTarjetaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoTarjetaChanged()
    End Sub
    Partial Private Sub OntarjetaCuponChanging(value As String)
    End Sub
    Partial Private Sub OntarjetaCuponChanged()
    End Sub
    Partial Private Sub OntarjetaAutorizacionChanging(value As String)
    End Sub
    Partial Private Sub OntarjetaAutorizacionChanged()
    End Sub
    Partial Private Sub OntarjetaCuotasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntarjetaCuotasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._comprobanteCabe = CType(Nothing, EntityRef(Of comprobanteCabe))
		Me._formaDePago = CType(Nothing, EntityRef(Of formaDePago))
		Me._tipoTarjeta = CType(Nothing, EntityRef(Of tipoTarjeta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCobro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCobro() As Integer
		Get
			Return Me._idCobro
		End Get
		Set
			If ((Me._idCobro = value)  _
						= false) Then
				Me.OnidCobroChanging(value)
				Me.SendPropertyChanging
				Me._idCobro = value
				Me.SendPropertyChanged("idCobro")
				Me.OnidCobroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idComprobante", DbType:="Int")>  _
	Public Property idComprobante() As System.Nullable(Of Integer)
		Get
			Return Me._idComprobante
		End Get
		Set
			If (Me._idComprobante.Equals(value) = false) Then
				If Me._comprobanteCabe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidComprobanteChanging(value)
				Me.SendPropertyChanging
				Me._idComprobante = value
				Me.SendPropertyChanged("idComprobante")
				Me.OnidComprobanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFormaPago", DbType:="Int")>  _
	Public Property idFormaPago() As System.Nullable(Of Integer)
		Get
			Return Me._idFormaPago
		End Get
		Set
			If (Me._idFormaPago.Equals(value) = false) Then
				If Me._formaDePago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidFormaPagoChanging(value)
				Me.SendPropertyChanging
				Me._idFormaPago = value
				Me.SendPropertyChanged("idFormaPago")
				Me.OnidFormaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importe", DbType:="Decimal(10,2)")>  _
	Public Property importe() As System.Nullable(Of Decimal)
		Get
			Return Me._importe
		End Get
		Set
			If (Me._importe.Equals(value) = false) Then
				Me.OnimporteChanging(value)
				Me.SendPropertyChanging
				Me._importe = value
				Me.SendPropertyChanged("importe")
				Me.OnimporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipoTarjeta", DbType:="Int")>  _
	Public Property idTipoTarjeta() As System.Nullable(Of Integer)
		Get
			Return Me._idTipoTarjeta
		End Get
		Set
			If (Me._idTipoTarjeta.Equals(value) = false) Then
				If Me._tipoTarjeta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTipoTarjetaChanging(value)
				Me.SendPropertyChanging
				Me._idTipoTarjeta = value
				Me.SendPropertyChanged("idTipoTarjeta")
				Me.OnidTipoTarjetaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tarjetaCupon", DbType:="VarChar(100)")>  _
	Public Property tarjetaCupon() As String
		Get
			Return Me._tarjetaCupon
		End Get
		Set
			If (String.Equals(Me._tarjetaCupon, value) = false) Then
				Me.OntarjetaCuponChanging(value)
				Me.SendPropertyChanging
				Me._tarjetaCupon = value
				Me.SendPropertyChanged("tarjetaCupon")
				Me.OntarjetaCuponChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tarjetaAutorizacion", DbType:="VarChar(100)")>  _
	Public Property tarjetaAutorizacion() As String
		Get
			Return Me._tarjetaAutorizacion
		End Get
		Set
			If (String.Equals(Me._tarjetaAutorizacion, value) = false) Then
				Me.OntarjetaAutorizacionChanging(value)
				Me.SendPropertyChanging
				Me._tarjetaAutorizacion = value
				Me.SendPropertyChanged("tarjetaAutorizacion")
				Me.OntarjetaAutorizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tarjetaCuotas", DbType:="Int")>  _
	Public Property tarjetaCuotas() As System.Nullable(Of Integer)
		Get
			Return Me._tarjetaCuotas
		End Get
		Set
			If (Me._tarjetaCuotas.Equals(value) = false) Then
				Me.OntarjetaCuotasChanging(value)
				Me.SendPropertyChanging
				Me._tarjetaCuotas = value
				Me.SendPropertyChanged("tarjetaCuotas")
				Me.OntarjetaCuotasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="comprobanteCabe_cobro", Storage:="_comprobanteCabe", ThisKey:="idComprobante", OtherKey:="idComprobante", IsForeignKey:=true)>  _
	Public Property comprobanteCabe() As comprobanteCabe
		Get
			Return Me._comprobanteCabe.Entity
		End Get
		Set
			Dim previousValue As comprobanteCabe = Me._comprobanteCabe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._comprobanteCabe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._comprobanteCabe.Entity = Nothing
					previousValue.cobros.Remove(Me)
				End If
				Me._comprobanteCabe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cobros.Add(Me)
					Me._idComprobante = value.idComprobante
				Else
					Me._idComprobante = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("comprobanteCabe")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formaDePago_cobro", Storage:="_formaDePago", ThisKey:="idFormaPago", OtherKey:="idFormaDePago", IsForeignKey:=true)>  _
	Public Property formaDePago() As formaDePago
		Get
			Return Me._formaDePago.Entity
		End Get
		Set
			Dim previousValue As formaDePago = Me._formaDePago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._formaDePago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._formaDePago.Entity = Nothing
					previousValue.cobros.Remove(Me)
				End If
				Me._formaDePago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cobros.Add(Me)
					Me._idFormaPago = value.idFormaDePago
				Else
					Me._idFormaPago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("formaDePago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipoTarjeta_cobro", Storage:="_tipoTarjeta", ThisKey:="idTipoTarjeta", OtherKey:="idTipoTarjeta", IsForeignKey:=true)>  _
	Public Property tipoTarjeta() As tipoTarjeta
		Get
			Return Me._tipoTarjeta.Entity
		End Get
		Set
			Dim previousValue As tipoTarjeta = Me._tipoTarjeta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipoTarjeta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipoTarjeta.Entity = Nothing
					previousValue.cobros.Remove(Me)
				End If
				Me._tipoTarjeta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cobros.Add(Me)
					Me._idTipoTarjeta = value.idTipoTarjeta
				Else
					Me._idTipoTarjeta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipoTarjeta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class PermisosVistaAjaxResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(179)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class usuarioVistaAjaxResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(226)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class ProveedorVistaPorCuitORazonResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(123)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class VistaProductoStockByDecripcionResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(196)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class ClienteVistaPorCuitORazonResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(145)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class ProductoVistaPorCodODescripcionResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(195)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class

Partial Public Class ProductoVistaByCodODescripcionYClienteResult
	
	Private _descripcion As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(195)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me._descripcion = value
			End If
		End Set
	End Property
End Class
